//
//  OCUSelectPlaceFromMapViewController.m
//  OfficialCar
//
//  Created by 张森明 on 16/9/20.
//  Copyright © 2016年 张俊辉. All rights reserved.
//

#import "XWUSelectPlaceFromMapViewController.h"
#import "XWUTextField.h"
#import "PullDownTableView.h"
#import "XWUMapPlaceModel.h"
#import "FBMapAllroundView.h"
#define KTipLabelHeight 44

@interface XWUSelectPlaceFromMapViewController () <MAMapViewDelegate,UITextFieldDelegate,AMapSearchDelegate,UIGestureRecognizerDelegate,FBMapAllroundViewDelegate>//,SearchResultDelegate
{
 
    
}
/// 搜索输入框
@property (nonatomic, weak) XWUTextField *searchTxt;
/// 搜索结果下拉列表
@property (nonatomic, strong) PullDownTableView *pullDownTableView;
/// 地图
@property (nonatomic, strong) MAMapView *mapView;
/// 地图搜索对象
@property (nonatomic, strong)  AMapSearchAPI *search;
/// 搜索提示数组
@property (nonatomic, strong) NSMutableArray *searchTipArr;
/// 搜索结果数组
@property (nonatomic, strong) NSMutableArray *searchResultArr;
/// 确定按钮
@property (nonatomic, strong) UIButton *confirmButton;
/// 确定按钮的原始frame
@property (nonatomic, assign) CGRect originalFrame;
/// 用手势添加的标注点
@property (nonatomic, strong) MAPointAnnotation *touchAnnotation;
@property (nonatomic,strong) MAPointAnnotation * centerAnnotation;/**<屏幕中心点标注数据*/
/// 地点模型
@property (nonatomic, strong) XWUMapPlaceModel *placeModel;
/// 是否逆地理编码用户位置
@property (nonatomic, assign) BOOL isReGeocodeUserLocation;
@property (nonatomic) BOOL isLongPressLocation;/**<是否是长按手势反地理编码*/
@property (nonatomic,strong) FBMapAllroundView * nearMapView;/**<附近的地理位置显示*/
@property (nonatomic,strong) UIImageView * centerImageView;/**<屏幕中心点的图标*/
@property (nonatomic,strong) NSMutableArray * poiAroundArray;/**<每次移动点后，显示在下面view中的数据*/
/// 用户当前所在城市
@property (nonatomic, copy) NSString *city;

@property (nonatomic, strong) UILabel *tipLabel;

@end

@implementation XWUSelectPlaceFromMapViewController

#pragma mark - View Life Cycle

- (void)viewDidLoad {
    [super viewDidLoad];
    [self prepareUI];
    [self longPressToAddAnotation];
}

- (void)dealloc {
    // 关掉后台定位
    self.mapView.pausesLocationUpdatesAutomatically = YES;
    self.mapView.allowsBackgroundLocationUpdates = NO; // iOS9以上系统必须配置
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
#pragma mark - create UI
- (void)prepareUI {
    [self setUpNavigationItem];
    [self loadMap];
    [self showTipLabel];
}
#pragma mark - 设置导航栏的搜索
- (void)setUpNavigationItem {
    self.navigationItem.leftBarButtonItem = [UIBarButtonItem itemWithImageName:@"common_nav_back" target:self action:@selector(back)];
//    [self.navigationController.navigationBar insertSubview:self.tipLabel atIndex:0];
    
    XWUTextField *searchTxt = [[XWUTextField alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH * 0.65, 28)];
    searchTxt.delegate = self;
    searchTxt.returnKeyType = UIReturnKeySearch;
    self.searchTxt = searchTxt;
    // 添加监听事件
    [searchTxt addTarget:self action:@selector(textFieldDidChange) forControlEvents:UIControlEventEditingChanged];
    [PublicMethod dealWithView:searchTxt cornerRadius:5];
    self.navigationItem.titleView = searchTxt;
}
//装载地图
- (void)loadMap {
    self.mapView = [PublicMethod loadMapInView:self.view];
    self.mapView.showsUserLocation = NO;//是否显示用户位置
    self.mapView.userTrackingMode = MAUserTrackingModeFollow;
    self.mapView.delegate = self;
    self.mapView.customizeUserLocationAccuracyCircleRepresentation = YES;
}
//提示文字
- (void)showTipLabel {
    [self.view addSubview:self.tipLabel];
    if (self.tipLabel.layer.animationKeys != nil) {
        [self.tipLabel.layer removeAllAnimations];
    }
    NSTimeInterval duration = 0.75;
    [UIView animateWithDuration:duration animations:^{
        CGRect frame = self.tipLabel.frame;
        frame.origin.y = 0;
        self.tipLabel.frame = frame;
    } completion:^(BOOL finished) {
        [UIView animateKeyframesWithDuration:duration delay:1.3 options:0 animations:^{
            CGRect frame = self.tipLabel.frame;
            frame.origin.y = -KTipLabelHeight;
            self.tipLabel.frame = frame;
            
        } completion:nil];
    }];
}
#pragma mark - 添加长按手势
- (void)longPressToAddAnotation {
    self.isLongPressLocation = YES;
    UILongPressGestureRecognizer *Lpress = [[UILongPressGestureRecognizer alloc]initWithTarget:self action:@selector(longPressClick:)];
    Lpress.delegate = self;
    Lpress.minimumPressDuration = 0.75; //0.75秒响应方法
    Lpress.allowableMovement = 50.0;
    [self.mapView addGestureRecognizer:Lpress];
}
//长按手势添加大头针
-(void)longPressClick:(UILongPressGestureRecognizer *)gestureRecognizer
{
    if ([gestureRecognizer state] == UIGestureRecognizerStateBegan){
        if (![PublicMethod isNetworkEnabled]) {
            [MBProgressHUD showError:@"网络出错，手势添加不可用" toView:self.view];
            return;
        }
        //坐标转换
        CGPoint touchPoint = [gestureRecognizer locationInView:self.mapView];
        CLLocationCoordinate2D touchMapCoordinate = [self.mapView convertPoint:touchPoint toCoordinateFromView:self.mapView];
        self.touchAnnotation = [[MAPointAnnotation alloc] init];
        self.touchAnnotation.coordinate = touchMapCoordinate;
        self.touchAnnotation.title = @"正在获取数据...";
        
        /* ========== 逆地理编码 ========== */
        [self reGeocodeWithLatitude:self.touchAnnotation.coordinate.latitude andLongitude:self.touchAnnotation.coordinate.longitude];
        
        // 移除之前已经添加的大头针
        [self removePreviousAnnotation];
        [self.mapView addAnnotation:self.touchAnnotation];
        [self.mapView selectAnnotation:self.touchAnnotation animated:YES];
        // 弹出确定按钮
        [self popConfirmButton];
    }
}
//移除上一个已经添加大头针
- (void)removePreviousAnnotation {
    // 移除之前已经添加的大头针
    NSArray *annotationArray = self.mapView.annotations;
    for (int i = 0; i < annotationArray.count; ++i) {
        // 将不是用户位置信息的标注点移除掉
        if (![annotationArray[i] isKindOfClass:[MAUserLocation class]]) {
            [self.mapView removeAnnotation:annotationArray[i]];
        }
    }
}
//监听输入框文字改变的回调方法
- (void)textFieldDidChange {
    // 每次搜索前先清空之前的搜索结果
    [self.searchTipArr removeAllObjects];
    self.pullDownTableView.dataSourceArr = self.searchTipArr;
    // 构造AMapInputTipsSearchRequest对象参数
    AMapInputTipsSearchRequest *tipsRequest = [[AMapInputTipsSearchRequest alloc] init];
    tipsRequest.keywords = self.searchTxt.text;
    tipsRequest.city = self.city;
    // 发起输入提示搜索
    [self.search AMapInputTipsSearch:tipsRequest];
}
#pragma mark - 添加搜索提示下拉列表视图
- (void)addSearchResultListView {
    // 添加下拉列表框
    UIWindow *window = [[UIApplication sharedApplication] keyWindow];
    self.pullDownTableView = [[PullDownTableView alloc] init];
    
    [PublicMethod dealWithView:self.pullDownTableView cornerRadius:3];
    [window addSubview:self.pullDownTableView];
    __weak typeof(self) weakSelf = self;
    self.pullDownTableView.selectedPullDownCellCallback = ^(NSIndexPath *indexPath,id selectedPlace){
        // 结束编辑
        [weakSelf.searchTxt resignFirstResponder];
        
        // 获取选中的地点的名称和经纬度
        AMapTip *tip = (AMapTip *)selectedPlace;
        weakSelf.placeModel.name = tip.name;
        weakSelf.placeModel.coordinate = CLLocationCoordinate2DMake(tip.location.latitude, tip.location.longitude);
        // 添加大头针
        [weakSelf addAnnotationWith:selectedPlace];
    };
    // 设置约束
    [self.pullDownTableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(weakSelf.navigationController.navigationBar.mas_bottom);
        make.leading.equalTo(weakSelf.view).offset(8);
        make.trailing.equalTo(weakSelf.view).offset(-8);
    }];
}
#pragma mark - 添加大头针
- (void)addAnnotationWith:(id)place {
    // 每添加一个大头针之前先清空之前已经添加的大头针
    [self removePreviousAnnotation];
    
    MAPointAnnotation *pointAnnotation = [[MAPointAnnotation alloc] init];
    if ([place isKindOfClass:[AMapPOI class]]) {
        AMapPOI *pPoi = (AMapPOI *)place;
        pointAnnotation.coordinate = CLLocationCoordinate2DMake(pPoi.location.latitude, pPoi.location.longitude);
        pointAnnotation.title = pPoi.name;
        pointAnnotation.subtitle = pPoi.address;
    }else if ([place isKindOfClass:[AMapTip class]]) {
        AMapTip *pTip = (AMapTip *)place;
        pointAnnotation.coordinate = CLLocationCoordinate2DMake(pTip.location.latitude, pTip.location.longitude);
        pointAnnotation.title = pTip.name;
        pointAnnotation.subtitle = pTip.address;
    }
    // 1.刷新地图
    self.mapView.centerCoordinate = pointAnnotation.coordinate;
    // 2.添加大头针
    [self.mapView addAnnotation:pointAnnotation];
    // 3.选中 ===>默认弹出气泡
    [self.mapView selectAnnotation:pointAnnotation animated:YES];
    // 弹出确定按钮
    [self popConfirmButton];
}
#pragma mark - 获取地图中心点的坐标
- (void)mapView:(MAMapView *)mapView regionWillChangeAnimated:(BOOL)animated{
    [self removePreviousAnnotation];
    self.centerImageView.hidden = NO;
}
-(void)mapView:(MAMapView *)mapView regionDidChangeAnimated:(BOOL)animated{
    [self removePreviousAnnotation];
    self.centerImageView.hidden = YES;
    _centerAnnotation = [[MAPointAnnotation alloc] init];
    _centerAnnotation.coordinate = mapView.centerCoordinate;
    _centerAnnotation.title = @"正在获取数据...";
    [self reGeocodeWithLatitude:_centerAnnotation.coordinate.latitude andLongitude:_centerAnnotation.coordinate.longitude];
    [self.mapView addAnnotation:_centerAnnotation];
    [self.mapView selectAnnotation:_centerAnnotation animated:YES];
    [self popConfirmButton];

//附近的搜索功能
    AMapPOIAroundSearchRequest * reauest = [[AMapPOIAroundSearchRequest alloc]init];
    reauest.location = [AMapGeoPoint locationWithLatitude:_centerAnnotation.coordinate.latitude longitude:_centerAnnotation.coordinate.longitude];
    reauest.requireExtension = YES;
    [self.search AMapPOIAroundSearch:reauest];
}
#pragma mark - 获取附近的数据
-(void)reloadDownView{
    [self.poiAroundArray insertObject:self.placeModel atIndex:0];
    self.nearMapView.dataArray = self.poiAroundArray;
    [self.nearMapView reloadInTabelData];
    [self showNearsAdress];
}
-(void)chooseAddress:(id)address{
    XWUMapPlaceModel * model = (XWUMapPlaceModel *)address;
    self.placeModel.name = model.name;
    self.placeModel.addressName = model.addressName;
    self.placeModel.coordinate = model.coordinate;
    [self confirmButtonDidClick];
}
#pragma mark - 选中地方以后 从底部弹出确定按钮
- (void)popConfirmButton{
    // 先重置按钮的frame，在从底部弹上来
    __weak typeof(self) weakSelf = self;
    [UIView animateWithDuration:0.3 animations:^{
        weakSelf.confirmButton.frame = weakSelf.originalFrame;
    } completion:^(BOOL finished) {
        [UIView animateWithDuration:0.5 animations:^{
            weakSelf.confirmButton.frame = CGRectMake(weakSelf.originalFrame.origin.x, weakSelf.originalFrame.origin.y - 150, weakSelf.originalFrame.size.width, weakSelf.originalFrame.size.height);
        }];
    }];
}


/**
 *  逆地理编码
 *
 *  @param latitude  纬度
 *  @param longitude 经度
 */
- (void)reGeocodeWithLatitude:(CGFloat)latitude andLongitude:(CGFloat)longitude {
    // 构造AMapReGeocodeSearchRequest对象
    AMapReGeocodeSearchRequest *regeo = [[AMapReGeocodeSearchRequest alloc] init]
    ;
    regeo.location = [AMapGeoPoint locationWithLatitude:latitude longitude:longitude];
    regeo.requireExtension = YES;
    // 发起逆地理编码
    [self.search AMapReGoecodeSearch:regeo];
}

#pragma mark - UIGestureRecognizerDelegate

- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
    return YES;
}

#pragma mark - UITextFieldDelegate
- (void)textFieldDidBeginEditing:(UITextField *)textField {
    // 开始编辑--添加下拉框
    [self addSearchResultListView];
    //搜索的时候隐藏下面view
    [self hideNearsAdress];
}

- (void)textFieldDidEndEditing:(UITextField *)textField {
    // 结束编辑---移除下拉框
    [self.pullDownTableView removeFromSuperview];
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [self searchPlace];
    [textField resignFirstResponder];
    return YES;
}

#pragma mark - MAMapViewDelegate
// 单击地图
- (void)mapView:(MAMapView *)mapView didSingleTappedAtCoordinate:(CLLocationCoordinate2D)coordinate {
    // 结束编辑
    [self.searchTxt resignFirstResponder];
}

// 地图将要缩放
- (void)mapView:(MAMapView *)mapView mapWillZoomByUser:(BOOL)wasUserAction {
    // 结束编辑
    [self.searchTxt resignFirstResponder];
}

- (void)mapView:(MAMapView *)mapView didUpdateUserLocation:(MAUserLocation *)userLocation updatingLocation:(BOOL)updatingLocation {
    if (self.city != nil) {
        return;
    }
    // 逆地理编码用户位置
    [self reGeocodeWithLatitude:userLocation.coordinate.latitude andLongitude:userLocation.coordinate.longitude];
    
    self.isReGeocodeUserLocation = YES;
}

#pragma mark - AMapSearchDelegate
// 实现逆地理编码的回调函数
- (void)onReGeocodeSearchDone:(AMapReGeocodeSearchRequest *)request response:(AMapReGeocodeSearchResponse *)response {
    if(response.regeocode != nil) {
        //通过AMapReGeocodeSearchResponse对象处理搜索结果
        AMapReGeocode *regeocode = response.regeocode;
        
        /* =============== 判断是否逆地理编码用户当前位置 =============== */
        if (self.isReGeocodeUserLocation) {
            // 是，逆地理编码用户当前位置
            if (regeocode.addressComponent.city.length > 0) {
                self.city = [regeocode.addressComponent.city substringToIndex:2];
            }
            self.isReGeocodeUserLocation = NO;
        } else if (self.isLongPressLocation){
            // 不是，逆地理编码长按屏幕添加的地点
            //regeocode.addressComponent.city
            self.touchAnnotation.title = [NSString stringWithFormat:@"%@%@%@",regeocode.addressComponent.district,regeocode.addressComponent.township,regeocode.addressComponent.neighborhood];;
            
            self.touchAnnotation.subtitle = [NSString stringWithFormat:@"%@%@%@",regeocode.addressComponent.building,regeocode.addressComponent.streetNumber.street,regeocode.addressComponent.streetNumber.number];
            
            // 记录标注的地址
            self.placeModel.name = [NSString stringWithFormat:@"%@%@",self.touchAnnotation.title,self.touchAnnotation.subtitle];
            self.placeModel.coordinate = self.touchAnnotation.coordinate;
            self.isLongPressLocation = NO;
        }else{
            self.centerAnnotation.title = [NSString stringWithFormat:@"%@%@%@",regeocode.addressComponent.district,regeocode.addressComponent.township,regeocode.addressComponent.neighborhood];;
            
            self.centerAnnotation.subtitle = [NSString stringWithFormat:@"%@%@%@",regeocode.addressComponent.building,regeocode.addressComponent.streetNumber.street,regeocode.addressComponent.streetNumber.number];

            // 记录标注的地址
            self.placeModel.name = self.centerAnnotation.title;
            self.placeModel.addressName = self.centerAnnotation.subtitle;
            self.placeModel.coordinate = self.centerAnnotation.coordinate;

        }
    }
}

// 实现搜索提示回调方法
- (void)onInputTipsSearchDone:(AMapInputTipsSearchRequest *)request response:(AMapInputTipsSearchResponse *)response {
    if (response.tips.count == 0) {
        return;
    }
    // 通过AMapInputTipsSearchResponse对象处理搜索结果
    //    NSString *strCount = [NSString stringWithFormat:@"count: %ld", response.count];
    NSString *strtips = @"";
    for (AMapTip *p in response.tips) {
        strtips = [NSString stringWithFormat:@"%@\nTip: %@", strtips, p.description];
        [self.searchTipArr addObject:p];
    }
    self.pullDownTableView.dataSourceArr = self.searchTipArr;
    //    NSString *result = [NSString stringWithFormat:@"%@ \n %@", strCount, strtips];
    //    NSLog(@"InputTips: %@", result);
}

// 实现大头针标注回调方法
- (MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation {
    if ([annotation isKindOfClass:[MAPointAnnotation class]])
    {
        static NSString *pointReuseIndentifier = @"pointReuseIndentifier";
        MAAnnotationView *annotationView = (MAAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:pointReuseIndentifier];
        if (annotationView == nil)
        {
            annotationView = [[MAAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:pointReuseIndentifier];
        }
        
        annotationView.image = [UIImage imageNamed:@"组-40"];
        //设置中心点偏移，使得标注底部中间点成为经纬度对应点
        annotationView.centerOffset = CGPointMake(0, -15);
        annotationView.canShowCallout= YES;       //设置气泡可以弹出，默认为NO
        annotationView.annotation = annotation;
        return annotationView;
    }
    
    /* 自定义userLocation对应的annotationView. */
    if ([annotation isKindOfClass:[MAUserLocation class]])
    {
        static NSString *userLocationStyleReuseIndetifier = @"userLocationStyleReuseIndetifier";
        MAAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:userLocationStyleReuseIndetifier];
        if (annotationView == nil)
        {
            annotationView = [[MAPinAnnotationView alloc] initWithAnnotation:annotation
                                                             reuseIdentifier:userLocationStyleReuseIndetifier];
        }
        //图片是空的 所以隐藏了
        annotationView.image = [UIImage imageNamed:@"userPosition"];
        
//        self.userLocationAnnotationView = annotationView;
        
        return annotationView;
    }
    return nil;
}

- (MAOverlayRenderer *)mapView:(MAMapView *)mapView rendererForOverlay:(id <MAOverlay>)overlay
{
    if (overlay == mapView.userLocationAccuracyCircle)
    {
        MACircleRenderer *accuracyCircleView = [[MACircleRenderer alloc] initWithCircle:overlay];
        
        accuracyCircleView.lineWidth    = 2.f;
        accuracyCircleView.strokeColor  = [UIColor clearColor];
        accuracyCircleView.fillColor    = [UIColor clearColor];
        
        return accuracyCircleView;
    }
    return nil;
}


// 实现POI关键字搜索的回调方法
- (void)onPOISearchDone:(AMapPOISearchBaseRequest *)request response:(AMapPOISearchResponse *)response {
    if ([request isKindOfClass:[AMapPOIAroundSearchRequest class]]) {
        if(response.pois.count == 0) {
            return;
        }
     //下面view上的数据
        self.poiAroundArray = [NSMutableArray array];
        for (AMapPOI *p in response.pois) {
            XWUMapPlaceModel * model = [[XWUMapPlaceModel alloc]init];
            model.name = p.name;
            model.coordinate = CLLocationCoordinate2DMake(p.location.latitude, p.location.longitude);
            model.addressName = p.address;
            [self.poiAroundArray addObject:model];
        }
        [self reloadDownView];
    }else{
        if(response.pois.count == 0) {
            [MBProgressHUD hideHUDForView:self.view];
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                
                [MBProgressHUD showError:@"没有搜索到结果"];
            });
            return;
        }
        NSString *strPoi = @"";
        self.searchResultArr = [NSMutableArray array];
        for (AMapPOI *p in response.pois) {
            strPoi = [NSString stringWithFormat:@"%@\nPOI: %@", strPoi, p.description];
            [self.searchResultArr addObject:p];
        }
    }
    [MBProgressHUD hideHUDForView:self.view];
}

#pragma mark - SearchResultDelegate

// 实现选中地点的回调方法
- (void)cellDidClickCallbackWith:(AMapPOI *)place {
    // 获取选中的地点的名称和经纬度
    self.placeModel.name = place.name;
    self.placeModel.coordinate = CLLocationCoordinate2DMake(place.location.latitude, place.location.longitude);
    
    // 添加大头针
    [self addAnnotationWith:place];
}


#pragma mark - Button Click

/**
 *  返回
 */
- (void)back {
    [self.navigationController popViewControllerAnimated:YES];
}

/**
 *  搜索地点
 */
- (void)searchPlace {
    [self.searchTxt resignFirstResponder];
    if (self.searchTxt.text.length == 0) {
        [MBProgressHUD showError:@"关键字为空"];
        return;
    }
    
    //构造AMapPlaceSearchRequest对象，配置POI查询参数
    AMapPOIKeywordsSearchRequest *request = [[AMapPOIKeywordsSearchRequest alloc] init];
    request.requireExtension = NO;
    request.keywords = self.searchTxt.text;
    request.city = self.city;
    if (![PublicMethod isNetworkEnabled]) {
        [MBProgressHUD showError:@"网络有问题"];
        return;
    }
    
    [MBProgressHUD showMessage:nil toView:self.view];
    // 发起POI关键字搜索
    [self.search AMapPOIKeywordsSearch:request];
}

#pragma mark - 点击确定按钮，返回上一页
- (void)confirmButtonDidClick {
    // 取出地图上标注的大头针
    if (self.placeModel.name) {
        XWUMapPlaceModel *place = self.placeModel;
        NSDictionary *placeType = @{@"PlaceType":@(self.placeType)};
        // 注册通知，将地址发送给申请界面控制器
        [[NSNotificationCenter defaultCenter] postNotificationName:@"GetPlaceFromMapNotifacation" object:place userInfo:placeType];
    }
    // 返回到申请页面
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark - 显示或者隐藏附近的地址
-(void)showNearsAdress{
    [UIView animateWithDuration:0.3 animations:^{
        self.nearMapView.frame = CGRectMake(0, SCREEN_HEIGHT * 2 / 3, SCREEN_WIDTH, SCREEN_HEIGHT / 3);
    }];
}
-(void)hideNearsAdress{
    [UIView animateWithDuration:0.3 animations:^{
        self.nearMapView.frame = CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT / 3);
    }];
}
#pragma mark - Setter & Getter

- (AMapSearchAPI *)search {
    if (_search == nil) {
        _search = [[AMapSearchAPI alloc] init];
        _search.delegate = self;
    }
    return _search;
}

- (NSMutableArray *)searchTipArr {
    if (_searchTipArr == nil) {
        _searchTipArr = [NSMutableArray array];
    }
    return _searchTipArr;
}

-(FBMapAllroundView *)nearMapView{
    if (!_nearMapView) {
        _nearMapView = [[FBMapAllroundView alloc]initWithFrame:CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT / 3)];
        _nearMapView.delegate = self;
        _nearMapView.backgroundColor = whiteUnifyColor;
        [self.view addSubview:_nearMapView];
    }
    return _nearMapView;
}

-(UIImageView *)centerImageView{
    if (!_centerImageView) {
        _centerImageView = [[UIImageView alloc]initWithFrame:CGRectMake((SCREEN_WIDTH - 14) / 2, (SCREEN_HEIGHT - 30) / 2 - 15, 14, 30)];
        _centerImageView.image = UIImageName(@"组-40");
        [self.view addSubview:_centerImageView];
    }
    return _centerImageView;
}
/// 确定按钮
- (UIButton *)confirmButton {
    if (_confirmButton == nil) {
        CGFloat width = 50;
        CGFloat height = width;
        CGFloat x = self.view.bounds.size.width - width - 25;
        CGFloat y = self.view.bounds.size.height + 50;
        self.originalFrame = CGRectMake(x, y, width, height);
        _confirmButton = [[UIButton alloc] initWithFrame:self.originalFrame];
        _confirmButton.layer.cornerRadius = width * 0.5;
        [_confirmButton setTitle:@"确定" forState:UIControlStateNormal];
        _confirmButton.titleLabel.font = [UIFont systemFontOfSize:14];
        _confirmButton.backgroundColor = UIColorWithRGB(40, 130, 224, 1);
        [self.view addSubview:_confirmButton];
        [self.view bringSubviewToFront:_confirmButton];
        [_confirmButton addTarget:self action:@selector(confirmButtonDidClick) forControlEvents:UIControlEventTouchUpInside];
    }
    return _confirmButton;
}

/// 提示
- (UILabel *)tipLabel {
    if (_tipLabel == nil) {
        _tipLabel = [[UILabel alloc] init];
        _tipLabel.backgroundColor = [UIColor blackColor];
        _tipLabel.alpha = 0.5;
        _tipLabel.textColor = [UIColor whiteColor];
        _tipLabel.text = @"可长按地图选择地点";
        _tipLabel.textAlignment = NSTextAlignmentCenter;
        _tipLabel.frame = CGRectMake(0, - KTipLabelHeight, SCREEN_WIDTH, KTipLabelHeight);
    }
    return _tipLabel;
}
/// 标注的地点模型
- (XWUMapPlaceModel *)placeModel {
    if (_placeModel == nil) {
        _placeModel = [[XWUMapPlaceModel alloc] init];
    }
    return _placeModel;
}


@end
