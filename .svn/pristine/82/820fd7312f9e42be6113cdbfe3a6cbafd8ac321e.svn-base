//
//  AppDelegate.m
//  FluentBus
//
//  Created by 666GPS on 2016/12/26.
//  Copyright © 2016年 yang. All rights reserved.
//

#import "AppDelegate.h"
#import "FBTabBarViewController.h"
#import "AppDelegate+FBThreeLibRegister.h"
#import "FBLoginViewController.h"
#import "FBNavigationController.h"
#import "MyMD5.h"
#import "SSKeychain.h"
#import "NSString+RSA.h"

static NSString *kKeychainService = @"com.666GPS.FluentBus";
static NSString *kKeychainDeviceId = @"KeychainDeviceId";

@interface AppDelegate ()
{
    NSString *_RSAString;
}

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

    //设置登录界面为根视图
    self.window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];
    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    
    //注册第三方类库
    [self registerThreeLib];


    FBTabBarViewController * TAB = [[FBTabBarViewController alloc]init];
    self.window.rootViewController = TAB;
//    
//    FBNavigationController *nav = [[FBNavigationController alloc]initWithRootViewController:[FBLoginViewController new]];
//    self.window.rootViewController = nav;
//    


    BOOL isUserBeforeLogined = [[NSUserDefaults standardUserDefaults] boolForKey:User_IS_BEFOR_LOGIN];
    if (isUserBeforeLogined == YES) {
        
        FBTabBarViewController * TAB = [[FBTabBarViewController alloc]init];
        self.window.rootViewController = TAB;
        
        [self getSecret];
        
    }else{
        FBNavigationController *nav = [[FBNavigationController alloc]initWithRootViewController:[FBLoginViewController new]];
        self.window.rootViewController = nav;
    }

    return YES;
}

//自动登录
-(void)autoToLogin
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setValue:[UserInfo userInfoWithUserDefaults].userName forKey:@"mobile"];
    [dict setValue:@"123" forKey:@"VerifyCode"];
    
    [dict setValue:_RSAString forKey:@"password"];
    

    [OCNetworkingTool POSTWithUrl:loginMyApp() withParams:dict success:^(id responseObject) {
        
         DBLog("%@",[PublicMethod jsEncapsulateWithDictionary:(NSDictionary *)responseObject]);
        [MBProgressHUD hideHUD];
        
        //        DBLog("%@",[PublicMethod jsEncapsulateWithDictionary:(NSDictionary *)responseObject]);
        
        if ([responseObject[@"code"] integerValue] == 200) {
            [MBProgressHUD showSuccess:@"自动登录成功"];
            
            NSDictionary *data = responseObject[@"data"];
            NSString *tokenId = data[@"TokenId"];
            NSString *defaultAppId = data[@"DefaultAppId"];
            NSString *mobile = data[@"Mobile"];
            NSString *myAppId = defaultAppId;
            
            NSDictionary *dict = @{@"userTokenId":tokenId, @"userAppId":myAppId,@"userName":mobile};
            [UserInfo userInfoWithDict:dict];
            //清空单例
            [HeaderInfo tearDown];
            //在单例中存入登录信息。
            [HeaderInfo sharedHeaderInfo];
            
            // 发送通知（通知首页控制器已经拿完数据了）
            [[NSNotificationCenter defaultCenter] postNotificationName:@"DoneNotification" object:self userInfo:nil];
            
        }else {
            [[NSUserDefaults standardUserDefaults] setBool:NO forKey:  User_IS_BEFOR_LOGIN];
            FBLoginViewController *login = [[FBLoginViewController alloc]init];
            FBNavigationController *nav=[[FBNavigationController alloc]initWithRootViewController:login];
            self.window.rootViewController = nav;
            //            sleep(1.5);
            [MBProgressHUD showError:@"自动登录失败"];
        }
        
    } fail:^(NSError *error) {
        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:  User_IS_BEFOR_LOGIN];
        [MBProgressHUD hideHUD];
        FBLoginViewController *login = [[FBLoginViewController alloc]init];
        FBNavigationController *nav=[[FBNavigationController alloc]initWithRootViewController:login];
        self.window.rootViewController = nav;
        //        sleep(1.5);
        [MBProgressHUD showError:@"自动登录失败"];
    }];
}

//拿到膜和指数，并进行加密
-(void)getSecret
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setValue:[UserInfo userInfoWithUserDefaults].userName forKey:@"UserName"];
    
    [OCNetworkingTool POSTWithUrl:getLoginKey() withParams:dict success:^(id responseObject) {
        
        DBLog(@"%@",responseObject);
        NSDictionary *data =responseObject[@"data"];
        NSString *myId = data[@"id"];
        NSString *secret = data[@"secret"];
        NSArray *temp=[secret componentsSeparatedByString:@"-"];
        NSLog(@"%@,%@",temp[0],temp[1]);
        
        //取密码
        NSString *localPassword = [SSKeychain passwordForService:kKeychainService account:[UserInfo userInfoWithUserDefaults].userName];
        
        NSString *md5Str;
        if (localPassword) {
            
            md5Str = [MyMD5 md5:localPassword];
        }
        //获取当前时间戳
        NSDate *currentDate = [PublicMethod getLocalCurrentDate];
        long currentSeconds = [PublicMethod getSecondsWithDate:currentDate];
        NSString *mycurrentSeconds = [NSString stringWithFormat:@"%ld000",currentSeconds];
        
        NSString *rsaStr = [NSString stringWithFormat:@"%@@%@@%@",md5Str,[UserInfo userInfoWithUserDefaults].userName,mycurrentSeconds];
        NSLog(@"%@",rsaStr);
        
        _RSAString =  [NSString setPublicKey:[rsaStr UTF8String] Mod:[temp[1] UTF8String] Exp:[temp[0] UTF8String]];
        _RSAString = [NSString stringWithFormat:@"%@@%@",_RSAString,myId];
        
        [self autoToLogin];
        
    } fail:^(NSError *error) {
        
        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:  User_IS_BEFOR_LOGIN];
        [MBProgressHUD hideHUD];
        FBLoginViewController *login = [[FBLoginViewController alloc]init];
        FBNavigationController *nav = [[FBNavigationController alloc]initWithRootViewController:login];
        self.window.rootViewController = nav;
        //        sleep(1.5);
        [MBProgressHUD showError:@"自动登录失败"];
    }];
}


- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}
#pragma mark - 新浪分享必须添加的回调
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url];
    if (!result) {
        // 其他如支付等SDK的回调
    }
    return result;
}

@end
