//
//  FBNeedViewController.m
//  FluentBus
//
//  Created by 666GPS on 2016/12/28.
//  Copyright © 2016年 yang. All rights reserved.
//

#import "FBNeedViewController.h"
#import "FBNeedListTableViewCell.h"
#import "FBNewNeedViewController.h"
#import "FBNeedListModel.h"
#import "FBRouteViewController.h"


@interface FBNeedViewController ()<UITableViewDelegate,UITableViewDataSource>
{
    
}
@property (nonatomic, assign) NSInteger page;
@property (nonatomic, assign) NSInteger totalPage;
@property (nonatomic, strong) NSMutableArray *modelArray;
@property(nonatomic,strong) UITableView *tableView;

@end

@implementation FBNeedViewController

- (void)viewDidLoad {
    
    [super viewDidLoad];
    
    self.navigationItem.rightBarButtonItem = [UIBarButtonItem itemWithTitle:@"发起新需求" target:self action:@selector(toMakeNewNeed)];
    //布局tableView
    [self creatBaseUI];
    
}

//发起新需求
- (void)toMakeNewNeed
{
     [self.navigationController pushViewController:[FBNewNeedViewController new] animated:YES];
}

//布局tableView
-(void)creatBaseUI{
    
    self.tableView = [[UITableView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT) style:UITableViewStylePlain];
    self.tableView.delegate = self;
    self.tableView.dataSource = self;
    self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    self.tableView.estimatedRowHeight = 139;
    self.tableView.backgroundColor = UIColorFromRGB(0xF5F5F5);
    [self.view addSubview:_tableView];
    
    //约束_taskTableView
    WeakSelf(weakSelf);
    
    //头部刷新
    self.tableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        self.page = 1;
        
        [weakSelf getNeedList];
    }];
    
    //底部加载
    self.tableView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingBlock:^{
        self.page++;
        NSLog(@"%ld",(long)self.page);
        if (self.page > self.totalPage) {
            [self.tableView.mj_footer endRefreshing];
            [MBProgressHUD showError:@"已经是最后一页了"];
            
        }else{
            [weakSelf getNeedList];
        }
    }];
    
    [self.tableView.mj_header beginRefreshing];
}

//获取列表数据
- (void)getNeedList
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setObject:@(self.page) forKey:@"PageIndex"];
    [dict setObject:@(10) forKey:@"PageSize"];
    
    [OCNetworkingTool POSTWithUrl:getNeedListUrl() withParams:dict success:^(id responseObject) {
        DBLog("%@",[PublicMethod jsEncapsulateWithDictionary:(NSDictionary *)responseObject]);
        if ([responseObject[@"code"] integerValue] == 200) {
            
            NSDictionary *data = responseObject[@"data"];
            self.totalPage = [data[@"totalPages"] integerValue];
            NSArray *array = data[@"dataList"];
            [self.tableView.mj_header endRefreshing];
            [self.tableView.mj_footer endRefreshing];
            if (self.page ==1) {
                
                [self.modelArray removeAllObjects];
            }
            for (NSDictionary *dict in array) {
                FBNeedListModel *model =[FBNeedListModel new];
                model.startStation = dict[@"startStation"];
                model.endStation = dict[@"endStation"];
                model.stime = dict[@"stime"];
                model.mprice = [NSString stringWithFormat:@"%@",dict[@"mprice"]];
                model.aprice = [NSString stringWithFormat:@"%@",dict[@"aprice"]];
                model.votedCount = [NSString stringWithFormat:@"%@",dict[@"votedCount"]];
                model.myId = dict[@"id"];
                model.rid = dict[@"rid"];
                [self.modelArray addObject:model];
        }
        
        [self.tableView reloadData];
       }
        
    } fail:^(NSError *error) {
        
        [self.tableView.mj_header endRefreshing];
        [self.tableView.mj_footer endRefreshing];
        [MBProgressHUD showError:@"请求列表失败，请稍后再试"];
    }];
}

//报名请求
- (void)toSignupRequestWithIndexRow:(NSInteger) indexPathRow{
    
    DBLog(@"%ld",indexPathRow);
    FBNeedListModel *model = self.modelArray[indexPathRow];
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    
    [param setValue:model.myId forKey:@"did"];
    [param setValue:[UserInfo userInfoWithUserDefaults].userId forKey:@"userid"];
    
    
    [OCNetworkingTool POSTWithUrl:DemandvotedDemandUrl() withParams:param success:^(id responseObject) {
        DBLog(@"%@",responseObject);
        if ([responseObject[@"code"] integerValue] == 200) {
            [MBProgressHUD showSuccess:@"报名成功"];
        }
        if ([responseObject[@"code"] integerValue] == 1000) {
            [MBProgressHUD showError:@"已经报过名了。"];
        }
        
    } fail:^(NSError *error) {
        [MBProgressHUD showError:@"报名失败，请稍后再试"];
    }];
}

#pragma mark - tableView代理

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.modelArray.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    FBNeedListTableViewCell * cell = [FBNeedListTableViewCell cellTableView:tableView];
    
    cell.tag = indexPath.row;
    FBNeedListModel *model = self.modelArray[indexPath.row];
    model.tag = cell.tag;
    cell.model = model;
    
    //途径点请求完成回调
    cell.callBack = ^(FBNeedListModel *newM){
        [self.modelArray replaceObjectAtIndex:newM.tag withObject:newM];
    };
    //点击报名回调
    cell.btnBlack = ^(){
        [self toSignupRequestWithIndexRow:indexPath.row];
    };
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    FBNeedListModel *model = self.modelArray[indexPath.row];
    FBRouteViewController *routeCtl = [[FBRouteViewController alloc]init];
    routeCtl.viewStyle = @"1";
    routeCtl.needListModel = model;
    [self.navigationController pushViewController:routeCtl animated:YES];
}

#pragma mark - 懒加载
- (NSMutableArray *)modelArray
{
    if (_modelArray == nil) {
        _modelArray = [NSMutableArray array];
    }
    return _modelArray;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
