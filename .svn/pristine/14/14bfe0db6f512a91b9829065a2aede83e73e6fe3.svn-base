//
//  FBRouteViewController.m
//  FluentBus
//
//  Created by 666GPS on 2016/12/29.
//  Copyright © 2016年 yang. All rights reserved.
//

#import "FBRouteViewController.h"
#import "FBMapMidTableView.h"
#import "FBConfirmOrderViewController.h"
#import "JF_CalendarView.h"
#import "FBNeedListRouteModel.h"
@interface FBRouteViewController ()<AMapNaviDriveManagerDelegate, AMapNaviDriveViewDelegate,FBMapMidTableViewDelegate,JF_CalendarViewDelegate,UIActionSheetDelegate>{
    FBMapMidTableView * viewMidMap;
    NSArray * _mapStationArray;
    
//    AMapNaviPoint * startNaviPoint;//起始站点坐标
//    AMapNaviPoint * endNaviPoint;//终点站点坐标
    NSMutableArray * naviPointArray;//中间站点数组
}

@property (nonatomic, strong) AMapNaviPoint *startPoint;
@property (nonatomic, strong) AMapNaviPoint *endPoint;
@property (nonatomic, strong) NSArray<AMapNaviPoint *> *wayPoints;
@property (nonatomic, strong) AMapNaviDriveManager *driveManager;
@property (nonatomic, strong) AMapNaviDriveView *driveView;

@property(nonatomic,strong) JF_CalendarView *calendarView;
//自定义View
@property (nonatomic,strong) UIView *blackView;
@end

@implementation FBRouteViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    //根据不同的类型，选择不同的title
    [self creatNaBarButton:@"1"];
    [self getMapStationsArray];
    [self creatMap];
    if (!_isHideDownButton) {
        [self creatDownButton:_viewStyle];
    }
}
- (void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self changeMap];
    });
}
-(void)getMapStationsArray{
    if ([_viewStyle integerValue] == 1) {
        [self getRouteWithRid:_needListModel.rid];
    }else if ([_viewStyle integerValue] == 2){
        [self getRouteWithRid:_productsShiftsModel.stationRid];
    }else{
        [self getRouteWithRid:_ticketListmodel.routeId];
    }
}
-(void)creatUpView{
    //根据传来的数据源不一样，显示不同的view
    id peremater = nil;
    if ([_viewStyle integerValue] == 1) {
        peremater = _needListModel;
    }else if ([_viewStyle integerValue] == 2){
        peremater = _productsShiftsModel;
    }else{
        peremater = _ticketListmodel;
    }
    viewMidMap = [[FBMapMidTableView alloc]initWithFrame:CGRectMake(SCREEN_WIDTH / 32, 80, SCREEN_WIDTH * 30 / 32, SCREEN_HEIGHT / 2) StyleView:_viewStyle Parameter:peremater TableViewArray:_mapStationArray];
    viewMidMap.delegate = self;    
    [self.view addSubview:viewMidMap];
}
#pragma mark - 获取站点列表以及地图上的站点坐标
-(void)getRouteWithRid:(NSString *)rid{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setObject:rid forKey:@"rid"];
    [OCNetworkingTool POSTWithUrl:searchRoteUrl() withParams:dict success:^(id responseObject) {
        DBLog("%@",[PublicMethod jsEncapsulateWithDictionary:(NSDictionary *)responseObject]);
        //请求成功拿数据
        NSArray *array = responseObject[@"data"];
        NSMutableArray *modelArray = [NSMutableArray array];
        if (array.count > 0) {
            for (NSDictionary *dic in array) {
//                FBNeedListRouteModel *model = [FBNeedListRouteModel new];
//                model.staindex = [dic[@"staindex"] integerValue];
//                model.sname = dic[@"sname"];
                FBNeedListRouteModel * model = [FBNeedListRouteModel yy_modelWithDictionary:dic];
                [modelArray addObject:model];
            }
            
            //拿完数据按升序排好
            NSArray *result = [modelArray sortedArrayUsingComparator:^NSComparisonResult(FBNeedListRouteModel * obj1, FBNeedListRouteModel * obj2) {
                return [@(obj1.staindex) compare:@(obj2.staindex)]; //升序
            }];
            _mapStationArray = result;
            [self getMapStationArrayData];
            [self creatUpView];
        }
    } fail:^(NSError *error) {
        
    }];
}
#pragma mark -  根据拿到的数据计算出要在地图上显示的点
-(void)getMapStationArrayData{
    naviPointArray = [[NSMutableArray alloc]init];
    for (int i = 0; i < _mapStationArray.count; i++) {
        FBNeedListRouteModel * model = _mapStationArray[i];
        if (i == 0) {
            self.startPoint = [AMapNaviPoint locationWithLatitude:[model.mlat floatValue] longitude:[model.mlng floatValue]];
        }else if (i == _mapStationArray.count - 1){
          self.endPoint = [AMapNaviPoint locationWithLatitude:[model.mlat floatValue] longitude:[model.mlng floatValue]];
        }else{
            AMapNaviPoint * point = [AMapNaviPoint locationWithLatitude:[model.mlat floatValue] longitude:[model.mlng floatValue]];
            [naviPointArray addObject:point];
        }
    }
    self.wayPoints  = [[NSArray alloc]initWithArray:naviPointArray];
    [self calculateRoute];

 }
#pragma mark - midview delegate 判断是否隐藏车站列表，是否显示日历
//是否隐藏车站列表
-(void)isShowTableView:(BOOL)isShow{
    if (isShow) {
        viewMidMap.frame = CGRectMake(SCREEN_WIDTH / 32, 80, SCREEN_WIDTH * 30 / 32, SCREEN_HEIGHT / 2);
    }else{
        viewMidMap.frame = CGRectMake(SCREEN_WIDTH / 32, 80, SCREEN_WIDTH * 30 / 32, (SCREEN_HEIGHT / 2) - 150);
    }
}
//显示日历
-(void)showCalender{
    
    self.automaticallyAdjustsScrollViewInsets=NO;
    UICollectionViewFlowLayout *layout=[[UICollectionViewFlowLayout alloc]init];
    layout.minimumInteritemSpacing=0;
    self.calendarView=[[JF_CalendarView alloc]initWithFrame:CGRectMake(0, 30, 300, 350) collectionViewLayout:layout];
    self.calendarView.myDelegate = self;
    NSArray *a=[NSArray arrayWithObjects:@"20170127", @"20170128",@"20170129",@"20170130",@"20170131",@"20170201",@"20170202",nil];
    [self.calendarView.registerArr addObjectsFromArray:a];
    //  self.calendarView.backgroundColor=[UIColor purpleColor];
    self.calendarView.center=self.view.center;
    [self.view addSubview:self.blackView];
    [self.view addSubview:self.calendarView];
}

//日历关闭回调
-(void)toClosecalendarView
{
    [self.blackView removeFromSuperview];
    [self.calendarView removeFromSuperview];
}

-(void)changeMap{
    [self.driveView setShowMode:AMapNaviDriveViewShowModeOverview];
}
#pragma mark - 创建地图
-(void)creatMap{
    [self initDriveView];
    [self initDriveManager];
}
- (void)initDriveManager{
    if (self.driveManager == nil){
        self.driveManager = [[AMapNaviDriveManager alloc] init];
        [self.driveManager setDelegate:self];
        self.driveManager.enableExternalLocation = YES;
        //将driveView添加为导航数据的Representative，使其可以接收到导航诱导数据
        [self.driveManager addDataRepresentative:self.driveView];

    }
}
- (void)initDriveView{
    if (self.driveView == nil){
        self.driveView = [[AMapNaviDriveView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
        [self.driveView setDelegate:self];
        //将导航界面的界面元素进行隐藏，然后通过自定义的控件展示导航信息
        [self.driveView setShowUIElements:NO];
        [self.view addSubview:self.driveView];
        self.driveView.showTrafficLayer = NO;
        self.driveView.showCamera = NO;
        [self.driveView setStartPointImage:[UIImage imageNamed:@"book_shifazhan"]];
        [self.driveView setEndPointImage:[UIImage imageNamed:@"book_zhongdianzhan"]];
        [self.driveView setWayPointImage:[UIImage imageNamed:@"book_jingguozhan"]];

    }
}
- (void)calculateRoute{
    [self.driveManager calculateDriveRouteWithStartPoints:@[self.startPoint]
                                                endPoints:@[self.endPoint]
                                                wayPoints:self.wayPoints
                                          drivingStrategy:AMapNaviDrivingStrategySingleDefault];
}
- (void)driveView:(AMapNaviDriveView *)driveView didChangeShowMode:(AMapNaviDriveViewShowMode)showMode{
   
}
-(void)creatNaBarButton:(NSString *)style{
    NSString * title;
    NSString * rightTitle;
    if ([style integerValue] == 1) {
        title = @"线路预览";
        rightTitle = @"分享";
    }
    self.title = title;
    [self.liftButtonItem addTarget:self action:@selector(goBack) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.liftButtonItem];
    
    [self.rightButtonItem setTitle:rightTitle forState:UIControlStateNormal];
    [self.rightButtonItem setTitleColor:UIColorWithRGB(100, 100, 100, 1) forState:UIControlStateNormal];
    [self.rightButtonItem addTarget:self action:@selector(searchRouteAction) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.rightButtonItem];
}

-(void)searchRouteAction{
    UIActionSheet * sheet = [[UIActionSheet alloc]initWithTitle:@"分享" delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:nil otherButtonTitles:@"微信",@"微博",@"QQ",@"星维",@"天河", nil];
    [sheet showInView:self.view];
}

-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{
    DBLog(@"***********************  选中分享 %@",actionSheet.title);
}

-(void)goBack{
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark - 最低下的button，根据参数不同显示不同的样式
-(void)creatDownButton:(NSString *)style{
    UIButton * button = [UIButton buttonWithType:UIButtonTypeCustom];
    NSString * title;
    if ([style integerValue] == 1) {
        title = @"立即报名";
         button.frame = CGRectMake(25, (SCREEN_HEIGHT - 20) * 9 / 10, SCREEN_WIDTH - 50, 40);
    }else if ([style integerValue] == 2) {
        title = @"立即订购";
         button.frame = CGRectMake(25, (SCREEN_HEIGHT - 20) * 9 / 10, SCREEN_WIDTH - 50, 40);
    }else{
         button.frame = CGRectMake(0, 0,0, 0);
    }
    [button.layer setMasksToBounds:YES];
    [button.layer setCornerRadius:5];
    button.backgroundColor = greenUnifyColor;
    [button setTitle:title forState:UIControlStateNormal];
    [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [button addTarget:self action:@selector(downButtonAction) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:button];
}

-(void)downButtonAction{
    if ([_viewStyle integerValue] == 1) {
      //线路预览界面
        [self toSignup];
    }else if ([_viewStyle integerValue] == 2) {
       //订票界面
        FBConfirmOrderViewController * confirm = [[FBConfirmOrderViewController alloc]init];
        [self.navigationController pushViewController:confirm animated:YES];
    }else{
    //地图导航界面
    }
}

// 报名接口
- (void)toSignup
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    
    [param setValue:_needListModel.myId forKey:@"did"];
    [param setValue:[UserInfo userInfoWithUserDefaults].userId forKey:@"userid"];
    
    [OCNetworkingTool POSTWithUrl:DemandvotedDemandUrl() withParams:param success:^(id responseObject) {
        DBLog(@"%@",responseObject);
        if ([responseObject[@"code"] integerValue] == 200) {
            [MBProgressHUD showSuccess:@"报名成功"];
        }
        if ([responseObject[@"code"] integerValue] == 1000) {
            [MBProgressHUD showError:@"已经报过名了。"];
        }
        
    } fail:^(NSError *error) {
        [MBProgressHUD showError:@"报名失败，请稍后再试"];
    }];
}

//查看路线信息
-(void)getAppLineByRid{
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setObject:_needListModel.rid forKey:@"rid"];
    [OCNetworkingTool POSTWithUrl:getAppLineByRidUrl() withParams:dic success:^(id responseObject) {
        DBLog("%@",[PublicMethod jsEncapsulateWithDictionary:(NSDictionary *)responseObject]);
    } fail:^(NSError *error) {
        
    }];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)dealloc{
    [self.driveManager stopNavi];
    [self.driveManager removeDataRepresentative:self.driveView];
    [self.driveManager setDelegate:nil];
    [self.driveView removeFromSuperview];
    self.driveView.delegate = nil;
}

#pragma mark - 懒加载
- (UIView *)blackView
{
    if (_blackView ==nil) {
        
        _blackView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
        _blackView.backgroundColor = [UIColor blackColor];
        _blackView.alpha = 0.3;
    }
    return _blackView;
}

@end
