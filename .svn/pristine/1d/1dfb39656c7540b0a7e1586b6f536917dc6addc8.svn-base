//
//  PublicMethod.m
//  NetworkCommunicationLayer
//
//  Created by GentryShen on 16/6/11.
//  Copyright © 2016年 GentryShen. All rights reserved.
//

#import "PublicMethod.h"

static NSMutableDictionary *_bitHexDic;
static NSMutableDictionary *_tenHexDic;
static NSMutableDictionary *_bitQDic;

@implementation PublicMethod

#pragma mark - 处理按钮

/**
 *  处理白色按钮
 *
 *  @param button 按钮
 */
+ (void)dealWithWhiteButtonForGrayClickShadow:(UIButton *)button {
    
    [button setBackgroundImage:[PublicMethod imageWithColor:[UIColor whiteColor]] forState:UIControlStateNormal];
    
    [button setBackgroundImage:[PublicMethod imageWithColor:UIColorFromRGB(0xdbdbdb)] forState:UIControlStateHighlighted];
    
}
+ (UIImage *)imageWithColor:(UIColor *)color {
    
    CGRect rect = CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    CGContextSetFillColorWithColor(context, color.CGColor);
    CGContextFillRect(context, rect);
    
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return image;
    
}

#pragma mark - 设备信息
/**
 *  设备信息
 *
 *  @return 设备描述
 */
+ (NSString *)device {
    
    UIScreen *screen = [UIScreen mainScreen];
    CGSize screenSize = screen.bounds.size;
    
    CGFloat height = screenSize.height;
    CGFloat width = screenSize.width;
    
    UIDevice *device = [UIDevice currentDevice];
    UIUserInterfaceIdiom idiom = device.userInterfaceIdiom;
    
    if (idiom == UIUserInterfaceIdiomPhone) {
        
        if (width == ScreenWidth_iPhone4s && height == ScreenHeight_iPhone4s) {
            
            return @"iPhone4s";
            
        }
        
        if (width == ScreenWidth_iPhone5s && height == ScreenHeight_iPhone5s) {
            
            return @"iPhone5s";
            
        }
        
        if (width == ScreenWidth_iPhone6s && height == ScreenHeight_iPhone6s) {
            
            return @"iPhone6s";
            
        }
        
        if (width == ScreenWidth_iPhone6sPlus && height == ScreenHeight_iPhone6sPlus) {
            
            return @"iPhone6sPlus";
            
        }
        
    }
    
    return nil;
    
}

#pragma mark - 返回按钮
/**
 *  返回按钮
 *
 *  @return 按钮
 */
+ (UIBarButtonItem *)backButton {
    
    UIBarButtonItem *backButton = [[UIBarButtonItem alloc] init];
    
    backButton.title = @"返回";
    
    return backButton;
    
}

#pragma mark - 视图边框
/**
 *  视图边框
 *
 *  @param view 视图
 */
+ (void)border:(UIView *)view {
    
    view.layer.borderWidth = 1.0f;
    
    view.layer.borderColor = UIColorFromRGB(0xdbdbdb).CGColor;
    
}

#pragma mark - 视图圆角
/**
 *  视图圆角
 *
 *  @param view 视图
 */
+ (void)cornerRadius:(UIView *)view {
    
    view.clipsToBounds = YES;
    view.layer.masksToBounds = YES;
    
    view.layer.cornerRadius = 3.0f;
    
}
/**
 *  视图圆角
 *
 *  @param view   视图
 *  @param radius 圆角
 */
+ (void)dealWithView:(UIView *)view cornerRadius:(CGFloat)radius {

    view.clipsToBounds = YES;
    view.layer.masksToBounds = YES;
    
    view.layer.cornerRadius = radius;
    
}

#pragma mark - 常用进制转换

/**
 *  二进制 -> 十进制
 *
 *  @param binary 二进制
 *
 *  @return       十进制
 */
+ (NSString *)binaryToDecimal:(NSString *)binary {
    
    NSUInteger decimal = 0;
    
    for (NSInteger index = 0; index < binary.length; index++) {
        
        double num = [[binary substringWithRange:(NSRange){binary.length - index - 1, 1}] doubleValue];
        decimal +=  num * pow(2, index);
        
    }
    
    return [NSString stringWithFormat:@"%ld", (long)decimal];
    
}
/**
 *  二进制 -> 八进制
 *
 *  @param binary 二进制
 *
 *  @return       八进制
 */
+ (NSString *)binaryToQ:(NSString *)binary {
    
    return [self decimalToQ:[[self binaryToDecimal:binary] integerValue]];
    
}
/**
 *  二进制 -> 十六进制
 *
 *  @param binary 二进制
 *
 *  @return       十六进制
 */
+ (NSString *)binaryToHex:(NSString *)binary {
    
    return [self decimalToHex:[[self binaryToDecimal:binary] integerValue]];
    
}

/**
 *  八进制 -> 二进制
 *
 *  @param q 八进制
 *
 *  @return       二进制
 */
+ (NSString *)qToBinary:(NSString *)q {
    
    NSMutableString *str = [NSMutableString stringWithString:@""];
    NSUInteger count = q.length;
    
    for (NSInteger index = 0; index < count; index++) {
        
        NSString *appendStr = [[self bitQDic] objectForKey:[q substringWithRange:(NSRange){index, 1}]];
        
        if(index == 0) {
            
            appendStr = [NSString stringWithFormat:@"%ld", (long)[appendStr integerValue]];
            
        }
        
        [str appendString:appendStr];
        
    }
    
    return str;
    
}
/**
 *  八进制 -> 十进制
 *
 *  @param q 八进制
 *
 *  @return       十进制
 */
+ (NSString *)qToDecimal:(NSString *)q {
    
    return [self binaryToDecimal:[self qToBinary:q]];
    
}
/**
 *  八进制 -> 十六进制
 *
 *  @param q 八进制
 *
 *  @return       十六进制
 */
+ (NSString *)qToHex:(NSString *)q {
    
    return [self binaryToHex:[self qToBinary:q]];
    
}

/**
 *  十进制 -> 二进制
 *
 *  @param tmpid 十进制
 *
 *  @return       二进制
 */
+ (NSString *)decimalToBinary:(NSUInteger)tmpid {
    
    return [self tenToOtherWithNum:tmpid system:2];
    
}
/**
 *  十进制 -> 八进制
 *
 *  @param tmpid 十进制
 *
 *  @return       八进制
 */
+ (NSString *)decimalToQ:(NSUInteger)tmpid {
    
    return [self tenToOtherWithNum:tmpid system:8];
    
}
/**
 *  十进制 -> 十六进制
 *
 *  @param tmpid 十进制
 *
 *  @return       十六进制
 */
+ (NSString *)decimalToHex:(NSUInteger)tmpid {
    
    NSMutableString *str = [NSMutableString stringWithString:@""];
    
    while (tmpid) {
        
        [str insertString:[[self tenHexDic] objectForKey:[NSString stringWithFormat:@"%ld", (long)(tmpid % 16)]] atIndex:0];
        tmpid /= 16;
        
    }
    
    return str;
    
}

/**
 *  十六进制 -> 二进制
 *
 *  @param hex 十六进制
 *
 *  @return       二进制
 */
+ (NSString *)hexToBinary:(NSString *)hex {
    
    NSMutableString *str = [NSMutableString stringWithString:@""];
    NSUInteger count = hex.length;
    
    for (NSInteger index = 0; index < count; index++) {
        
        NSString *appendStr = [[self bitHexDic] objectForKey:[hex substringWithRange:(NSRange){index, 1}]];
        if(index == 0){
            // 过滤前面的0
            appendStr = [NSString stringWithFormat:@"%ld", (long)[appendStr integerValue]];
            
        }
        
        [str appendString:appendStr];
        
    }
    
    return str;
    
}
/**
 *  十六进制 -> 八进制
 *
 *  @param hex 十六进制
 *
 *  @return       八进制
 */
+ (NSString *)hexToQ:(NSString *)hex {
    
    return [self binaryToQ:[self hexToBinary:hex]];
    
}
/**
 *  十六进制 -> 十进制
 *
 *  @param hex 十六进制
 *
 *  @return       十进制
 */
+ (NSString *)hexToDecimal:(NSString *)hex {
    
    return [self binaryToDecimal:[self hexToBinary:hex]];
    
}

+ (NSMutableDictionary *)bitHexDic {
    
    if(_bitHexDic == nil) {
        
        NSMutableDictionary *hex = [[NSMutableDictionary alloc] initWithCapacity:16];
        
        [hex setObject:@"0000" forKey:@"0"];
        
        [hex setObject:@"0001" forKey:@"1"];
        
        [hex setObject:@"0010" forKey:@"2"];
        
        [hex setObject:@"0011" forKey:@"3"];
        
        [hex setObject:@"0100" forKey:@"4"];
        
        [hex setObject:@"0101" forKey:@"5"];
        
        [hex setObject:@"0110" forKey:@"6"];
        
        [hex setObject:@"0111" forKey:@"7"];
        
        [hex setObject:@"1000" forKey:@"8"];
        
        [hex setObject:@"1001" forKey:@"9"];
        
        [hex setObject:@"1010" forKey:@"A"];
        
        [hex setObject:@"1011" forKey:@"B"];
        
        [hex setObject:@"1100" forKey:@"C"];
        
        [hex setObject:@"1101" forKey:@"D"];
        
        [hex setObject:@"1110" forKey:@"E"];
        
        [hex setObject:@"1111" forKey:@"F"];
        
        _bitHexDic = hex;
    }
    
    return _bitHexDic;
    
}

+ (NSMutableDictionary *)tenHexDic {
    
    if(_tenHexDic == nil) {
        
        NSMutableDictionary *hex = [[NSMutableDictionary alloc] initWithCapacity:16];
        
        [hex setObject:@"0" forKey:@"0"];
        
        [hex setObject:@"1" forKey:@"1"];
        
        [hex setObject:@"2" forKey:@"2"];
        
        [hex setObject:@"3" forKey:@"3"];
        
        [hex setObject:@"4" forKey:@"4"];
        
        [hex setObject:@"5" forKey:@"5"];
        
        [hex setObject:@"6" forKey:@"6"];
        
        [hex setObject:@"7" forKey:@"7"];
        
        [hex setObject:@"8" forKey:@"8"];
        
        [hex setObject:@"9" forKey:@"9"];
        
        [hex setObject:@"A" forKey:@"10"];
        
        [hex setObject:@"B" forKey:@"11"];
        
        [hex setObject:@"C" forKey:@"12"];
        
        [hex setObject:@"D" forKey:@"13"];
        
        [hex setObject:@"E" forKey:@"14"];
        
        [hex setObject:@"F" forKey:@"15"];
        
        _tenHexDic = hex;
        
    }
    
    return _tenHexDic;
    
}
+ (NSMutableDictionary *)bitQDic {
    
    if(_bitQDic == nil) {
        
        NSMutableDictionary *hex = [[NSMutableDictionary alloc] initWithCapacity:8];
        
        [hex setObject:@"000" forKey:@"0"];
        
        [hex setObject:@"001" forKey:@"1"];
        
        [hex setObject:@"010" forKey:@"2"];
        
        [hex setObject:@"011" forKey:@"3"];
        
        [hex setObject:@"100" forKey:@"4"];
        
        [hex setObject:@"101" forKey:@"5"];
        
        [hex setObject:@"110" forKey:@"6"];
        
        [hex setObject:@"111" forKey:@"7"];
        
        _bitQDic = hex;
        
    }
    
    return _bitQDic;
    
}
+ (NSString *)tenToOtherWithNum:(NSUInteger)num system:(NSUInteger)system {
    
    NSMutableString *str = [NSMutableString stringWithString:@""];
    
    while (num) {
        
        [str insertString:[NSString stringWithFormat:@"%ld", (long)(num % system)] atIndex:0];
        num /= system;
        
    }
    
    return str;
    
}

#pragma mark - 对两个相等长度的字符串进行异或运算
/**
 *  对两个相等长度的字符串进行异或运算
 *
 *  @param pan  任意字符串
 *  @param pinv 任意字符串
 *
 *  @return     结果字符串
 */
+ (NSString *)pinxCreator:(NSString *)pan withPinv:(NSString *)pinv {
    
    if (pan.length != pinv.length) {
        
        return nil;
        
    }
    
    const char *panchar = pan.UTF8String;
    const char *pinvchar = pinv.UTF8String;
    
    NSString *temp = [NSString string];
    
    for (int i = 0; i < pan.length; i++) {
        
        int panValue = [self charToint:panchar[i]];
        int pinvValue = [self charToint:pinvchar[i]];
        
        temp = [temp stringByAppendingString:[NSString stringWithFormat:@"%X", panValue ^ pinvValue]];
        
    }
    
    return temp;
    
}
+ (int)charToint:(char)tempChar {
    
    if (tempChar >= '0' && tempChar <='9') {
        
        return tempChar - '0';
        
    } else if (tempChar >= 'A' && tempChar <= 'F') {
        
        return tempChar - 'A' + 10;
        
    }
    
    return 0;
    
}

#pragma mark - 十六进制字符串转十六进制字节流
/**
 *  十六进制字符串转十六进制字节流
 *
 *  @param hex 字符串
 *
 *  @return    字节流
 */
+ (NSData *)hexStringToHexData:(NSString *)hex {
    
    unsigned long len = hex.length / 2;
    unsigned char *buf = malloc(len);
    unsigned char *whole_byte = buf;
    
    char byte_chars[3] = {'\0','\0','\0'};
    
    int i;
    
    for (i=0; i < hex.length / 2; i++) {
        
        byte_chars[0] = [hex characterAtIndex:i*2];
        byte_chars[1] = [hex characterAtIndex:i*2+1];
        *whole_byte = strtol(byte_chars, NULL, 16);
        
        whole_byte++;
        
    }
    
    NSData *data = [NSData dataWithBytes:buf length:len];
    free(buf);
    
    return data;
    
}

#pragma mark - 十六进制字节流转十六进制字符串
/**
 *  十六进制字节流转十六进制字符串
 *
 *  @param hex 字节流
 *
 *  @return    字符串
 */
+ (NSString *)hexDataToHexString:(NSData *)hex {
    
    NSUInteger len = hex.length;
    
    char *ch = (char *)hex.bytes;
    
    NSMutableString *hexString = [NSMutableString string];
    
    for (NSUInteger i = 0; i < len; i++ ) {
        
        [hexString appendString:[NSString stringWithFormat:@"%0.2hhx", ch[i]]];
        
    }
    
    return hexString;
    
}

#pragma mark - 日期转换为日期字符串
/**
 *  日期转换为日期字符串
 *
 *  @param date 日期
 *
 *  @return     日期字符串
 */
+ (NSString *)dateToDateString:(NSDate *)date {
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    
    return [dateFormatter stringFromDate:date];
    
}

#pragma mark -  获取本地当前时间
/**
 获取本地当前时间
 */
+ (NSDate *)getLocalCurrentDate {
    // 设置系统时区为本地时区
    NSTimeZone *zone = [NSTimeZone systemTimeZone];
    // 计算本地时区与 GMT 时区的时间差
    NSInteger interval = [zone secondsFromGMT];
    // 在 GMT 时间基础上追加时间差值，得到本地时间
    NSDate *currentDate = [[NSDate date] dateByAddingTimeInterval:interval];
    return currentDate;
}

/**
 *  根据时间字符串和格式转换成日期
 *
 *  @param time   时间字符串
 *  @param format 日期格式
 *
 *  @return 日期
 */
+ (NSDate *)dateWithString:(NSString *)time format:(NSString *)format {
    NSDateFormatter *inputFormatter = [[NSDateFormatter alloc] init];
    [inputFormatter setDateFormat:format];
    // 设置系统时区为本地时区
    NSTimeZone *zone = [NSTimeZone systemTimeZone];
    // 计算本地时区与 GMT 时区的时间差
    NSInteger interval = [zone secondsFromGMT];
    NSDate *date = [inputFormatter dateFromString:time];
    // 在 GMT 时间基础上追加时间差值，得到本地时间
    date = [date dateByAddingTimeInterval:interval];
    return date;
}

#pragma 获取day天后的日期(若day为负数,则为|day|天前的日期)
/**
 *  获取day天后的日期(若day为负数,则为|day|天前的日期)
 *
 *  @param day 时间间隔
 *
 *  @return    日期
 */
+ (NSDate *)dateAfterDay:(int)day {
    
    NSCalendar *calendar = [NSCalendar currentCalendar];
    
    NSDateComponents *components = [[NSDateComponents alloc] init];
    [components setDay:day];
    
    return [calendar dateByAddingComponents:components toDate:[NSDate date] options:0];
    
}

#pragma mark - 十六进制GBK字符串转普通字符串
/**
 *  十六进制GBK字符串转普通字符串
 *
 *  @param string GBK字符串
 *
 *  @return       普通字符串
 */
+ (NSString *)hexGBKStringToNormalString:(NSString *)string {
    
    NSData *hexGBKData = [PublicMethod hexStringToHexData:string];
    
    NSStringEncoding gbkEncoding = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);
    
    return [[NSString alloc] initWithData:hexGBKData encoding:gbkEncoding];
    
}

#pragma mark - 截取字符串中间部分
/**
 *  截取字符串中间部分
 *
 *  @param string 字符串
 *  @param head   头部位置
 *  @param tail   尾部位置
 *
 *  @return       结果字符串
 */
+ (NSString *)interceptMiddleString:(NSString *)string head:(NSUInteger)head andTail:(NSUInteger)tail {
    
    NSUInteger location = head;
    
    NSUInteger length = string.length - head - tail;
    
    return [string substringWithRange:NSMakeRange(location, length)];
    
}

#pragma mark - 十六进制ASCII字符串转普通字符串
/**
 *  十六进制ASCII字符串转普通字符串
 *
 *  @param string ASCII字符串
 *
 *  @return       普通字符串
 */
+ (NSString *)hexASCIIStringToNormalString:(NSString *)string {
    
    NSMutableString *resultString = [NSMutableString string];
    
    for (int i = 0; i < string.length / 2; i++) {
        
        char ch1 = [string characterAtIndex:i * 2];
        char ch2 = [string characterAtIndex:i * 2 + 1];
        
        NSString *item = [NSString stringWithFormat:@"%c", [PublicMethod hexToDecimal:[NSString stringWithFormat:@"%c%c", ch1, ch2]].intValue];
        
        [resultString appendString:item];
        
    }
    
    return resultString;
    
}

#pragma mark - 十六进制字符串转十进制字符串
/**
 *  十六进制字符串转十进制字符串
 *
 *  @param string 十六进制字符串
 *
 *  @return       十进制字符串
 */
+ (NSString *)hexStringToDecimalString:(NSString *)string {
    
    NSMutableString *resultString = [NSMutableString string];
    
    for (int i = 0; i < string.length / 2; i++) {
        
        char ch1 = [string characterAtIndex:i * 2];
        char ch2 = [string characterAtIndex:i * 2 + 1];
        
        NSString *item = [PublicMethod hexToDecimal:[NSString stringWithFormat:@"%c%c", ch1, ch2]];
        
        [resultString appendString:item];
        
    }
    
    return [NSString stringWithFormat:@"%d", resultString.intValue];
}

#pragma mark - 判断字符串为空
+ (BOOL)isBlankString:(NSString *)str{
    
    if (str == nil) {
        return YES;
    }
    
    if (str == NULL) {
        return YES;
    }
    
    if ([str isKindOfClass:[NSNull class]]) {
        return YES;
    }
    
    if ([[str stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length] ==0) {
        return  YES;
    }
    
    return NO;
}

#pragma mark - 装载地图
/**
 *  装载地图
 *
 *  @param view 地图容器
 *
 *  @return     地图视图
 */
+ (MAMapView *)loadMapInView:(UIView *)view {

    MAMapView *map = [[MAMapView alloc] initWithFrame:CGRectMake(0, 0, view.bounds.size.width, view.bounds.size.height)];
    [view addSubview:map];
    
    [PublicMethod configMap:map];
    
    return map;
    
}

#pragma mark - 配置地图
/**
 *  配置地图
 *
 *  @param map 地图视图
 */
+ (void)configMap:(MAMapView *)map {
    
    map.zoomLevel = 15.5f; // 缩放级别
    
    map.compassOrigin = CGPointMake(map.compassOrigin.x + 3, 1); // 罗盘
    map.scaleOrigin = CGPointMake(map.scaleOrigin.x - 7, 1); // 比例尺
    
    map.showsCompass = NO; // 隐藏罗盘
    map.showsScale = NO; // 隐藏比例尺
    
    // 0 定位功能
    // 1 开启定位-01: 打开定位
    map.showsUserLocation = NO; // YES表示打开定位,NO表示关闭定位
//    map.userTrackingMode = MAUserTrackingModeFollow;
    
    // 3 后台定位
    map.pausesLocationUpdatesAutomatically = YES;
    map.allowsBackgroundLocationUpdates = NO; // iOS9以上系统必须配置
}

#pragma mark - SHA1加密
/**
 *  SHA1加密
 *
 *  @param input 加密字符串
 *
 *  @return      结果字符串
 */
+ (NSString *)sha1:(NSString *)input {
    
    const char *ptr = [input UTF8String];
    
    int i = 0;
    int len = (int)strlen(ptr);
    Byte byteArray[len];
    
    while (i!=len) {
        unsigned eachChar = *(ptr + i);
        unsigned low8Bits = eachChar & 0xFF;
        byteArray[i] = low8Bits;
        i++;
    }
    
    unsigned char digest[CC_SHA1_DIGEST_LENGTH];
    CC_SHA1(byteArray, len, digest);
    
    NSMutableString *hex = [NSMutableString string];
    for (int i=0; i<20; i++) {
        [hex appendFormat:@"%02x", digest[i]];
    }
    NSString *immutableHex = [NSString stringWithString:hex];
    
    return immutableHex;
    
}

#pragma mark - 获取时间戳
/**
 *  获取时间戳
 *
 *  @return 时间戳
 */
+ (NSString *)getTimeInterval {
    
    return [NSString stringWithFormat:@"%.f", [[NSDate date] timeIntervalSince1970] * 1000];
    
}

#pragma mark - 获取当前年份
/**
 *  获取当前年份
 *
 *  @return 当前年份
 */
+ (NSInteger)getCurrentYear {

    NSDate *now = [NSDate date];
    
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSUInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;
    NSDateComponents *dateComponent = [calendar components:unitFlags fromDate:now];
    
    return [dateComponent year];
    
}

#pragma mark - 获取当前月份
/**
 *  获取当前月份
 *
 *  @return 当前月份
 */
+ (NSInteger)getCurrentMonth {
    
    NSDate *now = [NSDate date];
    
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSUInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;
    NSDateComponents *dateComponent = [calendar components:unitFlags fromDate:now];
    return [dateComponent month];
    
}

#pragma mark - 获取毫秒数

+ (NSInteger)getCurrentMillisecond{
    
    UInt64 recordTime = [[NSDate date] timeIntervalSince1970]*1000;
    
    return recordTime;
}

#pragma mark - Json封装
/**
 *  Json封装
 *
 *  @param dict 参数字典
 *
 *  @return     Json字符串
 */
+ (NSString *)jsonEncapsulateWithDictionary:(NSDictionary *)dict {
    
    NSData *data = [NSJSONSerialization dataWithJSONObject:dict options:0 error:nil];
    
    return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    
}

+ (NSString *)jsEncapsulateWithDictionary:(NSDictionary *)dict {
    
    NSData *data = [NSJSONSerialization dataWithJSONObject:dict options:NSJSONWritingPrettyPrinted error:nil];
    
    return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    
}


#pragma mark - Json解析
/**
 *  Json解析
 *
 *  @param data 数据流
 *
 *  @return     字典
 */
+ (NSDictionary *)jsonParseWithData:(NSData *)data {
    
    return [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:nil];
    
}

#pragma mark - 编码URL
/**
 *  编码URL
 *
 *  @param url 编码前URL
 *
 *  @return    编码后URL
 */
+ (NSString *)encodeUrl:(NSString *)url {
    
    return [url stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
    
}

#pragma mark - 解码URL
/**
 *  解码URL
 *
 *  @param url 解码前URL
 *
 *  @return    解码后URL
 */
+ (NSString *)decodeUrl:(NSString *)url {
    
    return [url stringByRemovingPercentEncoding];
    
}

#pragma mark - NSDictionary转为Base64字符串
/**
 *  NSDictionary转为base64字符串
 *
 *  @param dict 参数字典
 *
 *  @return    Base64字符串
 */
+ (NSString*)getBase64StringWithDictionary:(NSDictionary*)dict {
    
    NSError *error;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:&error];
    
    return [jsonData base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];
    
}

#pragma mark - 获取当前时间
/**
 *  获取当前时间
 *
 *  @return 当前时间字符串
 */
+ (NSString *)getCurrentTime {
    
    NSDate *now = [NSDate date];
    
    NSDateFormatter *dateformatter = [[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    
    return [dateformatter stringFromDate:now];
    
}

#pragma mark - 根据完整的电话号码获取缩略的电话号码
/**
 *  根据完整的电话号码获取缩略的电话号码
 *
 *  @param mobile 完整的电话号码 13808823215
 *
 *  @return 缩略的电话号码       138****3215
 */
+ (NSString *)getThumbnailMobileWithCompleteMobile:(NSString *)mobile {
    
    return [NSString stringWithFormat:@"%@%@%@", [mobile substringToIndex:3], @"****", [mobile substringFromIndex:7]];
    
}

#pragma mark - 根据生日获取年龄
/**
 *  根据生日获取年龄
 *
 *  @param birthday 年龄 1992-06-17
 *
 *  @return         生日 23
 */
+ (NSString *)getAgeWithBirthday:(NSString *)birthday {
    
    NSCalendar *calendar = [NSCalendar currentCalendar];
    
    NSDate *now = [NSDate date];
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
    NSDate *birth = [dateFormatter dateFromString:birthday];
    
    unsigned int unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;
    NSDateComponents *dateComponents = [calendar components:unitFlags fromDate:birth toDate:now options:0];
    
    if ([dateComponents year] > 0) {
        return [NSString stringWithFormat:@"%ld", (long)[dateComponents year]];
    } else {
        return @"0";
    }
    
}

#pragma mark - 获取设备系统版本
/**
 *  获取设备系统版本
 *
 *  @return 版本号 10.0
 */
+ (NSString *)systemVersion {

    return [UIDevice currentDevice].systemVersion;
    
}

#pragma mark - 获取文档路径
/**
 *  获取文档路径
 *
 *  @return 文档路径
 */
+ (NSString *)getDocumentPath {
    
    return NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;
    
}

#pragma mark - 归档模型数据
/**
 *  归档模型数据
 *
 *  @param modelData 模型数据
 *  @param modelName 模型名字
 */
+ (void)archiverModelData:(id)modelData withModelName:(NSString *)modelName {
    
    NSMutableData *mData = [NSMutableData data];
    NSKeyedArchiver *archiver = [[NSKeyedArchiver alloc] initForWritingWithMutableData:mData];
    
    [archiver encodeObject:modelData forKey:modelName];
    [archiver finishEncoding];
    
    [mData writeToFile:[[PublicMethod getDocumentPath] stringByAppendingPathComponent:modelName] atomically:YES];
    
}

#pragma mark - 解档模型数据
/**
 *  解档模型数据
 *
 *  @param modelName 模型名字
 *
 *  @return          模型数据
 */
+ (id)unArchiverModelDataWithModelName:(NSString *)modelName {
    
    NSData *data = [NSData dataWithContentsOfFile:[[PublicMethod getDocumentPath] stringByAppendingPathComponent:modelName]];
    NSKeyedUnarchiver *unArchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];
    
    id modelData = [unArchiver decodeObjectForKey:modelName];
    [unArchiver finishDecoding];
    
    return modelData;
    
}

#pragma mark - 获取label的高度
/*
 *计算Label高度
 */
+(float)getLabelHeight:(float)width fontSize:(float)fontSize text:(NSString*)text{

//    UILabel *lable = [[UILabel alloc] init];
//    lable.font = [UIFont systemFontOfSize:fontSize];
//    lable.text = text;
    
    //NSStringDrawingUsesDeviceMetrics
    //NSStringDrawingUsesLineFragmentOrigin
    CGSize labelsize = [text boundingRectWithSize:CGSizeMake(width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]} context:nil].size;
    float labelHeight = labelsize.height;
    return labelHeight;
}


+(float)getLabelWidth:(float)height fontSize:(float)fontSize text:(NSString *)text{
    
    CGSize labelsize = [text boundingRectWithSize:CGSizeMake(MAXFLOAT, height) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]} context:nil].size;
    float labelWidth = labelsize.width;
    return labelWidth;

}

#pragma mark - detecting Net state

+(BOOL)isNetworkEnabled
{

    BOOL bEnabled = FALSE;
    NSString *url = @"www.baidu.com";
    SCNetworkReachabilityRef ref = SCNetworkReachabilityCreateWithName(NULL, [url UTF8String]);
    SCNetworkReachabilityFlags flags;
    
    bEnabled = SCNetworkReachabilityGetFlags(ref, &flags);
    
    CFRelease(ref);
    if (bEnabled) {
        
        BOOL flagsReachable = ((flags & kSCNetworkFlagsReachable) != 0);
        BOOL connectionRequired = ((flags & kSCNetworkFlagsConnectionRequired) != 0);
        bEnabled = (flagsReachable && !connectionRequired) ? YES : NO;
        
    }
    
    return bEnabled;
}


#pragma mark - 获取当前wifi的名称

+ (NSString *)getWifiSSID{
    
    NSArray *ifs = (__bridge id)CNCopySupportedInterfaces();
    id info = nil;
    for (NSString *ifnam in ifs) {
        info = (__bridge id)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);
        if (info && [info count]) {
            break;
        }
    }
    NSDictionary *dctySSID = (NSDictionary *)info;
    NSString *ssid = [[dctySSID objectForKey:@"SSID"] lowercaseString];
    return ssid;
}

#pragma mark - 监听当前网络的状态,并保存

+ (void)observeCurrentNetStatus{

    NSUserDefaults *UD = [NSUserDefaults standardUserDefaults];
    AFNetworkReachabilityManager *manager = [AFNetworkReachabilityManager sharedManager];
    //设置监听
    [manager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        switch (status) {
            case AFNetworkReachabilityStatusUnknown:
                [UD setObject:@"UnKnown" forKey:@"CurrentNet"];
                [UD synchronize];
                DBLog(@"未识别的网络");
                break;
                
            case AFNetworkReachabilityStatusNotReachable:
                [MBProgressHUD showError:@"网络异常"];
                [UD setObject:@"NotReachable" forKey:@"CurrentNet"];
                [UD synchronize];
                DBLog(@"不可达的网络(未连接)");
                break;
                
            case AFNetworkReachabilityStatusReachableViaWWAN:
                [UD setObject:@"MobileNet" forKey:@"CurrentNet"];
                [UD synchronize];
                DBLog(@"2G,3G,4G...的网络");
                break;
                
            case AFNetworkReachabilityStatusReachableViaWiFi:
                [UD setObject:@"WifiNet" forKey:@"CurrentNet"];
                [UD synchronize];
                DBLog(@"wifi的网络");
                break;
            default:
                break;
        }
    }];
    //开始监听
    [manager startMonitoring];
}

#pragma mark - 秒数转具体本地日期

+ (NSString *)timeFormatted:(NSInteger)totalSeconds
{
//    NSDate  *date = [NSDate dateWithTimeIntervalSince1970:totalSeconds];
//    NSTimeZone *zone = [NSTimeZone systemTimeZone];
//    NSInteger interval = [zone secondsFromGMTForDate: date];
//    NSDate *localeDate = [date  dateByAddingTimeInterval: interval];
//    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
//    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
//    NSString *strDate = [dateFormatter stringFromDate:localeDate];

    NSDate  *localeDate = [NSDate dateWithTimeIntervalSince1970:totalSeconds];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    [dateFormatter setTimeZone:[NSTimeZone localTimeZone]];
    NSString *strDate = [dateFormatter stringFromDate:localeDate];

    return strDate;
}

+ (NSDate *)convertGMTDatetoLocalDate:(NSDate *)GMTDate {
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm"];
    NSString *gmtDateStr = [dateFormatter stringFromDate:GMTDate];
    NSTimeZone *gmt = [NSTimeZone systemTimeZone];
    
    [dateFormatter setTimeZone:gmt];
    
    NSDate *GMTTime = [dateFormatter dateFromString:gmtDateStr];
    
    NSTimeZone *tz = [NSTimeZone localTimeZone];
//    NSLog(@"%@",tz);
    NSInteger seconds = [tz secondsFromGMTForDate: GMTTime];
//    NSLog(@"%ld",(long)seconds);
//    NSLog(@"%@",[NSDate dateWithTimeInterval: seconds sinceDate: GMTTime]);
    return [NSDate dateWithTimeInterval: seconds sinceDate: GMTTime];
    
}

#pragma mark - 根据时间日期获取时间戳

+ (NSTimeInterval)getSecondsWithDate:(NSDate *)date
{
//    // 设置系统时区为本地时区
    NSTimeZone *zone = [NSTimeZone systemTimeZone];
//    // 计算本地时区与 GMT 时区的时间差
    NSInteger interval = [zone secondsFromGMT];
//    // 在 GMT 时间基础上追加时间差值，得到本地时间
    date = [date dateByAddingTimeInterval:-interval];
    NSTimeInterval timeStamp= [date timeIntervalSince1970];
    return timeStamp;
}

+(int)compareDate:(NSString*)date01 withDate:(NSString*)date02{
    int ci;
    NSDateFormatter *df = [[NSDateFormatter alloc]init];
    [df setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    NSDate *dt1 = [[NSDate alloc]init];
    NSDate *dt2 = [[NSDate alloc]init];
    dt1 = [df dateFromString:date01];
    dt2 = [df dateFromString:date02];
    NSComparisonResult result = [dt1 compare:dt2];
    switch (result)
    {
        //date02比date01大
        case NSOrderedAscending:
            ci = 1;
            break;
        //date02比date01小
        case NSOrderedDescending:
            ci = -1;
            break;
        //date02=date01
        case NSOrderedSame:
            ci = 0;
            break;
        default: NSLog(@"erorr dates %@, %@", dt2, dt1);break;
    }
    return ci;
}

#pragma mark -计算某个时间点距离当前时间的时间差
+ (NSString *)CalculationTimeWith:(NSString *)stime
{
    
    NSDate *nowDate = [NSDate date];
    NSDateFormatter *dateFomatter = [[NSDateFormatter alloc] init];
    dateFomatter.dateFormat = @"yyyy-MM-dd HH:mm:ss.0";
    // 截止时间字符串格式
    NSString *expireDateStr = stime;
    // 当前时间字符串格式
    NSString *nowDateStr = [dateFomatter stringFromDate:nowDate];
    // 截止时间data格式
    NSDate *expireDate = [dateFomatter dateFromString:expireDateStr];
    DBLog(@"%@",expireDate);
    // 当前时间data格式
    nowDate = [dateFomatter dateFromString:nowDateStr];
    // 当前日历
    NSCalendar *calendar = [NSCalendar currentCalendar];
    // 需要对比的时间数据
    NSCalendarUnit unit = NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;
    // 对比时间差
    NSDateComponents *dateCom = [calendar components:unit fromDate:nowDate toDate:expireDate options:0];
    NSLog(@"%ld-%ld-%ld-%ld",(long)dateCom.day,(long)dateCom.hour,dateCom.minute,dateCom.second);
    NSString *timeStr = [NSString stringWithFormat:@"%ld天%ld小时%ld分",dateCom.day,dateCom.hour,dateCom.minute];
    
    return timeStr;
}

#pragma mark -------------- 字符串操作 --------------
// 判断字符串是否为整形
+(BOOL)isPureInt:(NSString *)string{
    NSScanner* scan = [NSScanner scannerWithString:string];
    int val;
    return [scan scanInt:&val] && [scan isAtEnd];
}
// 判断字符串是否为浮点型
+(BOOL)isPureFloat:(NSString *)string{
    NSScanner* scan = [NSScanner scannerWithString:string];
    float val;
    return [scan scanFloat:&val] && [scan isAtEnd];
}
//返回分隔成两段的字符串，前后字体大小颜色均可不同
+(NSMutableAttributedString *)editString:(NSString *)editStr CarvePlace:(int)placeNumber PrecedFont:(CGFloat)precedFont PrecedColor:(UIColor *)precedColor BackFont:(CGFloat)backFont BackColor:(UIColor *)backColor{
    
    
    NSMutableAttributedString *attrString = [[NSMutableAttributedString alloc] initWithString:editStr];
    UIFont *font1 = [UIFont systemFontOfSize:precedFont];
    UIFont *font2 = [UIFont systemFontOfSize:backFont];
    [attrString addAttribute:NSFontAttributeName value:font1 range:NSMakeRange(0,placeNumber)];
    [attrString addAttribute:NSForegroundColorAttributeName value:precedColor range:NSMakeRange(0, 4)];
    [attrString addAttribute:NSFontAttributeName value:font2 range:NSMakeRange(placeNumber,editStr.length - placeNumber)];
    [attrString addAttribute:NSForegroundColorAttributeName value:backColor range:NSMakeRange(placeNumber,editStr.length - placeNumber)];

    return attrString;
}
#pragma mark -------------- delete http --------------
//删除
+(void)deleteHttpAFNetworkingUrl:(NSString *)url Parameter:(id)parameter Success:(void (^)(id))success Fail:(void (^)(id))fail{
    AFHTTPSessionManager * manager = [AFHTTPSessionManager manager];
    manager.requestSerializer = [AFHTTPRequestSerializer serializer];
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"text/html", nil];
    [manager DELETE:url parameters:parameter success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        success(responseObject);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        fail(error);
    }];
}

@end
