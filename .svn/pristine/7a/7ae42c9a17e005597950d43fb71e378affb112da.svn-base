//
//  FBRouteViewController.m
//  FluentBus
//
//  Created by 666GPS on 2016/12/29.
//  Copyright © 2016年 yang. All rights reserved.
//

#import "FBRouteViewController.h"
#import "FBMapMidTableView.h"
#import "FBConfirmOrderViewController.h"
#import "JF_CalendarView.h"
#import "FBNeedListRouteModel.h"
#import "FBPayOrderDataModel.h"
#import "CustomAnnotationView.h"
@interface FBRouteViewController ()<AMapNaviDriveManagerDelegate, AMapNaviDriveViewDelegate,FBMapMidTableViewDelegate,JF_CalendarViewDelegate,UIActionSheetDelegate,MAMapViewDelegate>{
    FBMapMidTableView * viewMidMap;
    NSArray * _mapStationArray;
    NSArray * dateList;/**<要显示日历的数据*/
    NSMutableArray * naviPointArray;//中间站点数组
    FBNeedListRouteModel * listRouteModel;/**<返回在下拉列表里面选择的站点数据*/
    
    
    //创建的普通地图，后期根据需求判断是否需要
    MAMapView * _maMapView;/**<创建的普通地图，用于显示放大某一站点的功能*/
    
}
//zjh
@property (nonatomic, strong) NSMutableArray *overlaysAboveLabels;

@property (nonatomic, strong) AMapNaviPoint *startPoint;
@property (nonatomic, strong) AMapNaviPoint *endPoint;
@property (nonatomic, strong) NSArray<AMapNaviPoint *> *wayPoints;
@property (nonatomic, strong) AMapNaviDriveManager *driveManager;
@property (nonatomic, strong) AMapNaviDriveView *driveView;

@property(nonatomic,strong) JF_CalendarView *calendarView;
//自定义View
@property (nonatomic,strong) UIView *blackView;
@end

@implementation FBRouteViewController

- (NSMutableArray *)overlaysAboveLabels
{
    if (_overlaysAboveLabels == nil) {
        _overlaysAboveLabels = [NSMutableArray array];
    }
    return _overlaysAboveLabels;
}

-(void)dealloc
{
    [HYBNetworking cancelAllRequest];
    [self.driveManager removeDataRepresentative:self.driveView];
    [self.driveManager setDelegate:nil];
    self.driveView.delegate = nil;
    [self.driveView removeFromSuperview];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [MBProgressHUD showMessage:nil];
    //根据不同的类型，选择不同的title
    [self creatNaBarButton:_viewStyle];
    [self getMapStationsArray];
    [self creatMap];
    if (!_isHideDownButton) {
        [self creatDownButton:_viewStyle];
    }
}
- (void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
}
-(void)viewDidDisappear:(BOOL)animated{
    [super viewDidDisappear:animated];
    viewMidMap.delegate = nil;
    [HYBNetworking cancelAllRequest];
    [self.driveManager removeDataRepresentative:self.driveView];
    [self.driveManager setDelegate:nil];
    self.driveView.delegate = nil;
    [self.driveView removeFromSuperview];
}
-(void)getMapStationsArray{
    if ([_viewStyle integerValue] == 1) {
        [self getRouteWithRid:_needListModel.rid];
    }else if ([_viewStyle integerValue] == 2){
        [self getRouteWithRid:_productsShiftsModel.stationRid];
    }else{
        [self getRouteWithRid:_ticketListmodel.routeId];
    }
}
-(void)creatUpView{
    //根据传来的数据源不一样，显示不同的view
    id peremater = nil;
    if ([_viewStyle integerValue] == 1) {
        peremater = _needListModel;
    }else if ([_viewStyle integerValue] == 2){
        peremater = _productsShiftsModel;
        [self getDateList];
    }else{
        peremater = _ticketListmodel;
    }
    viewMidMap = [[FBMapMidTableView alloc]initWithFrame:CGRectMake(SCREEN_WIDTH / 32, 80, SCREEN_WIDTH * 30 / 32, SCREEN_HEIGHT / 2) StyleView:_viewStyle Parameter:peremater TableViewArray:_mapStationArray];
    viewMidMap.delegate = self;    
    [self.view addSubview:viewMidMap];
}
#pragma mark - 获取日历的数据源
-(void)getDateList{
    [OCNetworkingTool POSTWithUrl:getDateList() withParams:@{@"pid":_productsShiftsModel.stationPid} success:^(id responseObject) {
        NSDictionary * dic = (NSDictionary *)responseObject;
        if ([[dic objectForKey:@"code"] integerValue] == 200) {
            NSArray * array = [dic objectForKey:@"data"];
            if (array.count <= 0) {
                [MBProgressHUD showError:@"获取日历数据失败"];
            }else{
                dateList = [dic objectForKey:@"data"];
            }
        }
    } fail:^(NSError *error) {
        [MBProgressHUD showError:@"获取日历数据失败"];
    }];
}
#pragma mark - 获取站点列表以及地图上的站点坐标
-(void)getRouteWithRid:(NSString *)rid{
    [FBNeedListRouteModel getAppStationLineRid:rid Success:^(id successed) {
        _mapStationArray = (NSArray *)successed;
        [self getMapStationArrayData];
        [self creatUpView];
    } Fail:^(id failed) {
        [MBProgressHUD hideHUD];
        [WCAlertView showAlertWithTitle:@"提示" message:@"获取数据失败,请重新进入界面获取数据" customizationBlock:^(WCAlertView *alertView) {
            
        } completionBlock:^(NSUInteger buttonIndex, WCAlertView *alertView) {
            if (buttonIndex == 0) {
                [self goBack];
            }
        } cancelButtonTitle:nil otherButtonTitles:@"确定", nil];
    }];
}
#pragma mark -  根据拿到的数据计算出要在地图上显示的点
-(void)getMapStationArrayData{
    //这里得到地图的点，供导航地图使用
    naviPointArray = [[NSMutableArray alloc]init];
    
    //这里得到地图的点，供普通地图使用
    CLLocationCoordinate2D coordinate[_mapStationArray.count];
    for (int i = 0; i < _mapStationArray.count; i++) {
        FBNeedListRouteModel * model = _mapStationArray[i];
        
        //普通地图使用的点赋值
        coordinate[i].latitude = [model.mlat floatValue];
        coordinate[i].longitude = [model.mlng floatValue];
        //添加大头针
        MAPointAnnotation *pointAnnotation = [[MAPointAnnotation alloc] init];
        pointAnnotation.coordinate = CLLocationCoordinate2DMake([model.mlat floatValue], [model.mlng floatValue]);
        pointAnnotation.title = [NSString stringWithFormat:@"%d",i];
        [_maMapView addAnnotation:pointAnnotation];
        
        
        //导航地图使用的点赋值
        if (i == 0) {
            self.startPoint = [AMapNaviPoint locationWithLatitude:[model.mlat floatValue] longitude:[model.mlng floatValue]];
        }else if (i == _mapStationArray.count - 1){
          self.endPoint = [AMapNaviPoint locationWithLatitude:[model.mlat floatValue] longitude:[model.mlng floatValue]];
        }else{
            AMapNaviPoint * point = [AMapNaviPoint locationWithLatitude:[model.mlat floatValue] longitude:[model.mlng floatValue]];
            [naviPointArray addObject:point];
        }
    }
    self.wayPoints  = [[NSArray alloc]initWithArray:naviPointArray];
    //这里要判断一下把这些数据点给导航地图还是普通地图
    if ([_viewStyle integerValue] == 1000) {
         MAPolyline *texPolyline = [MAPolyline polylineWithCoordinates:coordinate count:_mapStationArray.count];
        [self.overlaysAboveLabels addObject:texPolyline];
        //显示地图上所有的标注点，需要设置这个属性
        _maMapView.visibleMapRect = texPolyline.boundingMapRect;
         [_maMapView addOverlays:self.overlaysAboveLabels];
    }else{
        [self calculateRoute];
    }
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self changeMap];
    });
 }

#pragma mark - midview delegate 判断是否隐藏车站列表，是否显示日历
//是否隐藏车站列表
-(void)isShowTableView:(BOOL)isShow{
    if (isShow) {
        viewMidMap.frame = CGRectMake(SCREEN_WIDTH / 32, 80, SCREEN_WIDTH * 30 / 32, SCREEN_HEIGHT / 2);
    }else{
        viewMidMap.frame = CGRectMake(SCREEN_WIDTH / 32, 80, SCREEN_WIDTH * 30 / 32, (SCREEN_HEIGHT / 2) - 130);
    }
}

#pragma mark -  2 进入的时候显示日历
//显示日历

-(void)showCalender{
    
//    self.automaticallyAdjustsScrollViewInsets=NO;
    UICollectionViewFlowLayout *layout=[[UICollectionViewFlowLayout alloc]init];
    layout.minimumInteritemSpacing=0;
    self.calendarView=[[JF_CalendarView alloc]initWithFrame:CGRectMake(0, 30, 300, 350) collectionViewLayout:layout];
    self.calendarView.myDelegate = self;
    NSMutableArray *calendarArray = [NSMutableArray array];
    if (ArrayNotNilAndNull(dateList)) {
        for (NSNumber *timeNum in dateList) {
            NSString *timeStr = [NSString stringWithFormat:@"%@",timeNum];
            if (timeStr.length >=10) {
                timeStr = [timeStr substringToIndex:[timeStr length] - 3];
                [calendarArray addObject: [self getTimeb:timeStr]];
            }
        }
    }
    [self.calendarView.registerArr addObjectsFromArray:[calendarArray copy]];
    //  self.calendarView.backgroundColor=[UIColor purpleColor];
    self.calendarView.center=self.view.center;
    [self.view addSubview:self.blackView];
    [self.view addSubview:self.calendarView];

}

//日历关闭回调
-(void)toClosecalendarView
{
    [self.blackView removeFromSuperview];
    [self.calendarView removeFromSuperview];
}

#pragma mark -  3 进入的时候显示日历
-(void)showCalenderThree:(FBTicketDetailListModel *)tickModel{
    
//    self.automaticallyAdjustsScrollViewInsets=NO;
    UICollectionViewFlowLayout *layout=[[UICollectionViewFlowLayout alloc]init];
    layout.minimumInteritemSpacing=0;
    self.calendarView=[[JF_CalendarView alloc]initWithFrame:CGRectMake(0, 30, 300, 350) collectionViewLayout:layout];
    self.calendarView.myDelegate = self;
    NSMutableArray *calendarArray = [NSMutableArray array];
    if (ArrayNotNilAndNull(tickModel.dateList)) {
        for (NSNumber *timeNum in tickModel.dateList) {
            NSString *timeStr = [NSString stringWithFormat:@"%@",timeNum];
            if (timeStr.length >=10) {
                timeStr = [timeStr substringToIndex:[timeStr length] - 3];
                [calendarArray addObject: [self getTimeb:timeStr]];
            }
        }
    }
    [self.calendarView.registerArr addObjectsFromArray:[calendarArray copy]];
    //  self.calendarView.backgroundColor=[UIColor purpleColor];
    self.calendarView.center=self.view.center;
    [self.view addSubview:self.blackView];
    [self.view addSubview:self.calendarView];
}

//去掉毫秒后的时间
-(NSString *)getTimeb:(NSString *)time{
    NSDate  *localeDate = [NSDate dateWithTimeIntervalSince1970:[time integerValue]];
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyyMMdd"];
    [dateFormatter setTimeZone:[NSTimeZone localTimeZone]];
    NSString *strDate = [dateFormatter stringFromDate:localeDate];
    
    return strDate;
}

-(void)changeMap{
    [self.driveView setShowMode:AMapNaviDriveViewShowModeOverview];
    [MBProgressHUD hideHUD];
}
#pragma mark - 创建地图
-(void)creatMap{
    //这里添加一个判断，如果是需要放大地图的功能（订票界面（2）进来的当点击单个站点的时候需要放大地图），这里就创建普通地图，否则就创建导航地图，导航地图划线比较圆滑
    if ([_viewStyle integerValue] == 1000) {
        //普通地图
        _maMapView = [PublicMethod loadMapInView:self.view];
        _maMapView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
       _maMapView.delegate = self;
    }else{
        //导航地图
        [self initDriveView];
        [self initDriveManager];
    }
}
- (void)initDriveManager{
    if (self.driveManager == nil){
        self.driveManager = [[AMapNaviDriveManager alloc] init];
        [self.driveManager setDelegate:self];
        self.driveManager.enableExternalLocation = YES;
        //将driveView添加为导航数据的Representative，使其可以接收到导航诱导数据
        [self.driveManager addDataRepresentative:self.driveView];

    }
}
- (void)initDriveView{
    if (self.driveView == nil){
        self.driveView = [[AMapNaviDriveView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
//        self.driveView = aaa;
        [self.driveView setDelegate:self];
        //将导航界面的界面元素进行隐藏，然后通过自定义的控件展示导航信息
        [self.driveView setShowUIElements:NO];
        [self.view addSubview:self.driveView];
        self.driveView.showTrafficLayer = NO;
        self.driveView.showCamera = NO;
        [self.driveView setStartPointImage:[UIImage imageNamed:@"book_shifazhan"]];
        [self.driveView setEndPointImage:[UIImage imageNamed:@"book_zhongdianzhan"]];
        [self.driveView setWayPointImage:[UIImage imageNamed:@"book_jingguozhan"]];

    }
}
//导航地图显示每个站点
- (void)calculateRoute{
    [self.driveManager calculateDriveRouteWithStartPoints:@[self.startPoint] endPoints:@[self.endPoint] wayPoints:self.wayPoints drivingStrategy:AMapNaviDrivingStrategySingleDefault];
}
- (void)driveView:(AMapNaviDriveView *)driveView didChangeShowMode:(AMapNaviDriveViewShowMode)showMode{
   
}
-(void)creatNaBarButton:(NSString *)style{
    NSString * title;
    NSString * rightTitle;
    if ([style integerValue] == 1) {
        title = @"线路预览";
        rightTitle = @"分享";
    }else if ([style integerValue] == 2){
        title = @"订票";
        rightTitle = @"分享";
    }else{
        title = @"地图导航";
        rightTitle = @"分享";
    }
    self.title = title;
    [self.liftButtonItem addTarget:self action:@selector(goBack) forControlEvents:UIControlEventTouchUpInside];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.liftButtonItem];
    // 分享按钮
//    [self.rightButtonItem setTitle:rightTitle forState:UIControlStateNormal];
//    [self.rightButtonItem setTitleColor:UIColorWithRGB(100, 100, 100, 1) forState:UIControlStateNormal];
//    [self.rightButtonItem addTarget:self action:@selector(searchRouteAction) forControlEvents:UIControlEventTouchUpInside];
//    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:self.rightButtonItem];
    
}

-(void)searchRouteAction{
    UIActionSheet * sheet = [[UIActionSheet alloc]initWithTitle:@"分享" delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:nil otherButtonTitles:@"微信",@"微博",@"QQ",@"星维",@"天河", nil];
    [sheet showInView:self.view];
}

-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{
    DBLog(@"***********************  选中分享 %@",actionSheet.title);
}

-(void)goBack{
    viewMidMap.delegate = nil;
    [HYBNetworking cancelAllRequest];
    [self.driveManager removeDataRepresentative:self.driveView];
    [self.driveManager setDelegate:nil];
    self.driveView.delegate = nil;
    [self.driveView removeFromSuperview];
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark - 最低下的button，根据参数不同显示不同的样式
-(void)creatDownButton:(NSString *)style{
    UIButton * button = [UIButton buttonWithType:UIButtonTypeCustom];
    NSString * title;
    if ([style integerValue] == 1) {
        title = @"立即报名";
         button.frame = CGRectMake(25, (SCREEN_HEIGHT + 5) * 9 / 10, SCREEN_WIDTH - 50, 40);
    }else if ([style integerValue] == 2) {
        title = @"立即订购";
         button.frame = CGRectMake(25, (SCREEN_HEIGHT + 5) * 9 / 10, SCREEN_WIDTH - 50, 40);
    }else{
         button.frame = CGRectMake(0, 0,0, 0);
    }
    [button.layer setMasksToBounds:YES];
    [button.layer setCornerRadius:5];
    button.backgroundColor = greenUnifyColor;
    [button setTitle:title forState:UIControlStateNormal];
    [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [button addTarget:self action:@selector(downButtonAction) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:button];
}

-(void)downButtonAction{
    if ([_viewStyle integerValue] == 1) {
      //线路预览界面
        [self toSignup];
    }else if ([_viewStyle integerValue] == 2) {
        [self submitOrder];
    }else{
    //地图导航界面
    }
}

// 报名接口
- (void)toSignup
{
    NSMutableDictionary *param = [NSMutableDictionary dictionary];
    
    [param setValue:_needListModel.myId forKey:@"did"];
    [param setValue:[UserInfo userInfoWithUserDefaults].userId forKey:@"userid"];
    
    [OCNetworkingTool POSTWithUrl:DemandvotedDemandUrl() withParams:param success:^(id responseObject) {
//        DBLog(@"%@",responseObject);
        if ([responseObject[@"code"] integerValue] == 200) {
            [MBProgressHUD showSuccess:@"报名成功"];
        }
        if ([responseObject[@"code"] integerValue] == 1000) {
            [MBProgressHUD showError:@"已经报过名了。"];
        }
        
    } fail:^(NSError *error) {
        [MBProgressHUD showError:@"报名失败，请稍后再试"];
    }];
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -  订购界面进入，提交订单
-(void)submitOrder{
    [MBProgressHUD showMessage:@"订单提交中" toView:self.view];
    if (listRouteModel == nil) {
        listRouteModel = _mapStationArray[0];
    }
    NSDictionary * sendDic = @{@"classIndex":_productsShiftsModel.stationId,@"orderType":[NSNumber numberWithInt:0],@"productId":_productsShiftsModel.stationPid,@"productName":_productsShiftsModel.productName,@"seatId":[NSNumber numberWithInt:1],@"stationId":listRouteModel.sid,@"stationName":listRouteModel.sname};
    [OCNetworkingTool POSTWithUrl:createOrder() withParams:sendDic success:^(id responseObject) {
        [MBProgressHUD hideHUDForView:self.view];
        NSDictionary * dic = (NSDictionary *)responseObject;
        if ([[dic objectForKey:@"code"] integerValue] == 200) {
            FBPayOrderDataModel * payModel = [FBPayOrderDataModel yy_modelWithDictionary:[dic objectForKey:@"data"]];
            //提交订单。提交成功以后跳转到确认订单界面
            FBConfirmOrderViewController * confirm = [[FBConfirmOrderViewController alloc]init];
            confirm.payOrderDataModel = payModel;
            confirm.needListRouteModel = listRouteModel;
            confirm.productShiftsModel = _productsShiftsModel;
            [self.navigationController pushViewController:confirm animated:YES];
        }else if ([[dic objectForKey:@"code"] integerValue] == 1000){
            TTAlert1(@"该订单已经购买，请在订单列表查询", self);
        }else if ([[dic objectForKey:@"code"] integerValue] == 1002){
            TTAlert1(@"已无多余座位，请选择其他车票", self);
        }else{
            TTAlert1(@"提交订单失败，请重新提交", self);
        }
    } fail:^(NSError *error) {
        [MBProgressHUD hideHUDForView:self.view];
        [MBProgressHUD showError:@"创建订单失败"];
    }];
}
#pragma mark -  选中上车站点
//获取选择的站点
-(void)chooseStationSid:(FBNeedListRouteModel *)routeModel{
    if ([_viewStyle integerValue] == 2) {
        CLLocationCoordinate2D coordinate = CLLocationCoordinate2DMake([routeModel.mlat doubleValue], [routeModel.mlng doubleValue]);
        [_maMapView setCenterCoordinate:coordinate animated:NO];
//        [_maMapView setZoomLevel:18 animated:YES];
        CLLocationCoordinate2D coordinateNew = [_maMapView convertPoint:CGPointMake(SCREEN_WIDTH / 2, SCREEN_HEIGHT * 5 / 16) toCoordinateFromView:self.view];
        [_maMapView setCenterCoordinate:coordinateNew animated:YES];
    }
    listRouteModel = routeModel;
}
-(void)SelectIndex:(NSInteger)selectIndex{
     TTAlert1(@"请选择正确的上车站点", self);
}
#pragma mark - 懒加载
- (UIView *)blackView2{
    if (_blackView ==nil) {
        
        _blackView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
        _blackView.backgroundColor = [UIColor blackColor];
        _blackView.alpha = 0.3;
    }
    return _blackView;
}

#pragma mark - MAMapViewDelegate

- (MAOverlayRenderer *)mapView:(MAMapView *)mapView rendererForOverlay:(id <MAOverlay>)overlay
{
    if ([overlay isKindOfClass:[MAPolyline class]])
    {
        MAPolylineRenderer *polylineRenderer = [[MAPolylineRenderer alloc] initWithPolyline:overlay];
        
            polylineRenderer.lineWidth    = 8.f;
            [polylineRenderer loadStrokeTextureImage:[UIImage imageNamed:@"arrowTexture"]];
        
        
        return polylineRenderer;
    }
    
    return nil;
}

//自定义标注
- (MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation
{
    if ([annotation isKindOfClass:[MAPointAnnotation class]])
    {
        static NSString *reuseIndetifier = @"annotationReuseIndetifier";
        CustomAnnotationView *annotationView = (CustomAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:reuseIndetifier];
        if (annotationView == nil)
        {
            annotationView = [[CustomAnnotationView alloc] initWithAnnotation:annotation
                                                              reuseIdentifier:reuseIndetifier];
        }
        //设置图片
        if ([annotation.title integerValue] == 0) {
            annotationView.image = [UIImage imageNamed:@"book_shifazhan"];
        }else if ([annotation.title integerValue] == _mapStationArray.count-1) {
            annotationView.image = [UIImage imageNamed:@"book_zhongdianzhan"];
        }else{
            annotationView.image = [UIImage imageNamed:@"book_jingguozhan"];
        }
        //        annotationView.selected = YES;
        //设置气泡可以弹出，默认为NO
        annotationView.canShowCallout = NO;
        //设置中心点偏移，使得标注底部中间点成为经纬度对应点
        annotationView.centerOffset = CGPointMake(0, -13);
        return annotationView;
        
    }
    return nil;
}

@end
